{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unsafeNativize = exports.unsafeNativizeVariables = exports.ResultInspector = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:format:utils:inspect\");\n\nvar util_1 = __importDefault(require(\"util\"));\n\nvar Format = __importStar(require(\"../common\"));\n\nvar Exception = __importStar(require(\"./exception\")); //HACK -- inspect options are ridiculous, I swear >_>\n\n\nfunction cleanStylize(options) {\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(options).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return key === \"stylize\" ? {} : _defineProperty({}, key, value);\n  }))));\n}\n/**\n * This class is meant to be used with Node's\n * [util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n * function.  Given a [[Format.Values.Result]] `value`, one can use\n * `new ResultInspector(value)` to create a ResultInspector for that value,\n * which can be used with util.inspect() to create a human-readable string\n * representing the value.\n *\n * @example\n * Suppose `value` is a Result.  In Node, the following would print to the\n * console a human-readable representation of `value`, with colors enabled,\n * no maximum depth, and no maximum array length, and lines (usually) no\n * longer than 80 characters:\n * ```javascript\n * console.log(\n *   util.inspect(\n *     new ResultInspector(value),\n *     {\n *       colors: true,\n *       depth: null,\n *       maxArrayLength: null,\n *       breakLength: 80\n *     }\n *   )\n * );\n * ```\n * Of course, there are many other ways to use util.inspect; see Node's\n * documentation, linked above, for more.\n */\n\n\nvar ResultInspector = /*#__PURE__*/function () {\n  function ResultInspector(result) {\n    _classCallCheck(this, ResultInspector);\n\n    this.result = result;\n  }\n\n  _createClass(ResultInspector, [{\n    key: util_1.default.inspect.custom,\n    value: function value(depth, options) {\n      switch (this.result.kind) {\n        case \"value\":\n          switch (this.result.type.typeClass) {\n            case \"uint\":\n            case \"int\":\n              return options.stylize(this.result.value.asBN.toString(), \"number\");\n\n            case \"fixed\":\n            case \"ufixed\":\n              //note: because this is just for display, we don't bother adjusting the magic values Big.NE or Big.PE;\n              //we'll trust those to their defaults\n              return options.stylize(this.result.value.asBig.toString(), \"number\");\n\n            case \"bool\":\n              return util_1.default.inspect(this.result.value.asBoolean, options);\n\n            case \"bytes\":\n              var hex = this.result.value.asHex;\n\n              switch (this.result.type.kind) {\n                case \"static\":\n                  return options.stylize(hex, \"number\");\n\n                case \"dynamic\":\n                  return options.stylize(\"hex'\".concat(hex.slice(2), \"'\"), \"string\");\n              }\n\n            case \"address\":\n              return options.stylize(this.result.value.asAddress, \"number\");\n\n            case \"string\":\n              {\n                var coercedResult = this.result;\n\n                switch (coercedResult.value.kind) {\n                  case \"valid\":\n                    return util_1.default.inspect(coercedResult.value.asString, options);\n\n                  case \"malformed\":\n                    //note: this will turn malformed utf-8 into replacement characters (U+FFFD)\n                    //note we need to cut off the 0x prefix\n                    return util_1.default.inspect(Buffer.from(coercedResult.value.asHex.slice(2), \"hex\").toString());\n                }\n              }\n\n            case \"array\":\n              {\n                var _coercedResult = this.result;\n\n                if (_coercedResult.reference !== undefined) {\n                  return formatCircular(_coercedResult.reference, options);\n                }\n\n                return util_1.default.inspect(_coercedResult.value.map(function (element) {\n                  return new ResultInspector(element);\n                }), options);\n              }\n\n            case \"mapping\":\n              return util_1.default.inspect(new Map(this.result.value.map(function (_ref4) {\n                var key = _ref4.key,\n                    value = _ref4.value;\n                return [new ResultInspector(key), new ResultInspector(value)];\n              })), options);\n\n            case \"struct\":\n              {\n                var _coercedResult2 = this.result;\n\n                if (_coercedResult2.reference !== undefined) {\n                  return formatCircular(_coercedResult2.reference, options);\n                }\n\n                return util_1.default.inspect(Object.assign.apply(Object, [{}].concat(_toConsumableArray(_coercedResult2.value.map(function (_ref5) {\n                  var name = _ref5.name,\n                      value = _ref5.value;\n                  return _defineProperty({}, name, new ResultInspector(value));\n                })))), options);\n              }\n\n            case \"userDefinedValueType\":\n              {\n                var typeName = Format.Types.typeStringWithoutLocation(this.result.type);\n                var _coercedResult3 = this.result;\n                var inspectOfUnderlying = util_1.default.inspect(new ResultInspector(_coercedResult3.value), options);\n                return \"\".concat(typeName, \".wrap(\").concat(inspectOfUnderlying, \")\"); //note only the underlying part is stylized\n              }\n\n            case \"tuple\":\n              {\n                var _coercedResult4 = this.result; //if everything is named, do same as with struct.\n                //if not, just do an array.\n                //(good behavior in the mixed case is hard, unfortunately)\n\n                if (_coercedResult4.value.every(function (_ref7) {\n                  var name = _ref7.name;\n                  return name;\n                })) {\n                  return util_1.default.inspect(Object.assign.apply(Object, [{}].concat(_toConsumableArray(_coercedResult4.value.map(function (_ref8) {\n                    var name = _ref8.name,\n                        value = _ref8.value;\n                    return _defineProperty({}, name, new ResultInspector(value));\n                  })))), options);\n                } else {\n                  return util_1.default.inspect(_coercedResult4.value.map(function (_ref10) {\n                    var value = _ref10.value;\n                    return new ResultInspector(value);\n                  }), options);\n                }\n              }\n\n            case \"type\":\n              {\n                switch (this.result.type.type.typeClass) {\n                  case \"contract\":\n                    //same as struct case but w/o circularity check\n                    return util_1.default.inspect(Object.assign.apply(Object, [{}].concat(_toConsumableArray(this.result.value.map(function (_ref11) {\n                      var name = _ref11.name,\n                          value = _ref11.value;\n                      return _defineProperty({}, name, new ResultInspector(value));\n                    })))), options);\n\n                  case \"enum\":\n                    {\n                      return enumTypeName(this.result.type.type);\n                    }\n                }\n              }\n\n            case \"magic\":\n              return util_1.default.inspect(Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(this.result.value).map(function (_ref13) {\n                var _ref14 = _slicedToArray(_ref13, 2),\n                    key = _ref14[0],\n                    value = _ref14[1];\n\n                return _defineProperty({}, key, new ResultInspector(value));\n              })))), options);\n\n            case \"enum\":\n              {\n                return enumFullName(this.result); //not stylized\n              }\n\n            case \"contract\":\n              {\n                return util_1.default.inspect(new ContractInfoInspector(this.result.value), options);\n              }\n\n            case \"function\":\n              switch (this.result.type.visibility) {\n                case \"external\":\n                  {\n                    var _coercedResult5 = this.result;\n                    var contractString = util_1.default.inspect(new ContractInfoInspector(_coercedResult5.value.contract), Object.assign(Object.assign({}, cleanStylize(options)), {\n                      colors: false\n                    }));\n                    var firstLine;\n\n                    switch (_coercedResult5.value.kind) {\n                      case \"known\":\n                        firstLine = \"[Function: \".concat(_coercedResult5.value.abi.name, \" of\");\n                        break;\n\n                      case \"invalid\":\n                      case \"unknown\":\n                        firstLine = \"[Function: Unknown selector \".concat(_coercedResult5.value.selector, \" of\");\n                        break;\n                    }\n\n                    var secondLine = \"\".concat(contractString, \"]\");\n                    var breakingSpace = firstLine.length + secondLine.length + 1 > options.breakLength ? \"\\n\" : \" \"; //now, put it together\n\n                    return options.stylize(firstLine + breakingSpace + secondLine, \"special\");\n                  }\n\n                case \"internal\":\n                  {\n                    var _coercedResult6 = this.result;\n\n                    switch (_coercedResult6.value.kind) {\n                      case \"function\":\n                        if (_coercedResult6.value.definedIn) {\n                          return options.stylize(\"[Function: \".concat(_coercedResult6.value.definedIn.typeName, \".\").concat(_coercedResult6.value.name, \"]\"), \"special\");\n                        } else {\n                          return options.stylize(\"[Function: \".concat(_coercedResult6.value.name, \"]\"), \"special\");\n                        }\n\n                      case \"exception\":\n                        return _coercedResult6.value.deployedProgramCounter === 0 ? options.stylize(\"[Function: <zero>]\", \"special\") : options.stylize(\"[Function: <uninitialized>]\", \"special\");\n\n                      case \"unknown\":\n                        var _firstLine = \"[Function: decoding not supported (raw info:\";\n\n                        var _secondLine = \"deployed PC=\".concat(_coercedResult6.value.deployedProgramCounter, \", constructor PC=\").concat(_coercedResult6.value.constructorProgramCounter, \")]\");\n\n                        var _breakingSpace = _firstLine.length + _secondLine.length + 1 > options.breakLength ? \"\\n\" : \" \"; //now, put it together\n\n\n                        return options.stylize(_firstLine + _breakingSpace + _secondLine, \"special\");\n                    }\n                  }\n              }\n\n          }\n\n        case \"error\":\n          {\n            debug(\"this.result: %O\", this.result);\n            var errorResult = this.result; //the hell?? why couldn't it make this inference??\n\n            switch (errorResult.error.kind) {\n              case \"WrappedError\":\n                return util_1.default.inspect(new ResultInspector(errorResult.error.error), options);\n\n              case \"UintPaddingError\":\n                return \"Uint has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"IntPaddingError\":\n                return \"Int has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"UintPaddingError\":\n                return \"Ufixed has (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"FixedPaddingError\":\n                return \"Fixed has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"BoolOutOfRangeError\":\n                return \"Invalid boolean (numeric value \".concat(errorResult.error.rawAsBN.toString(), \")\");\n\n              case \"BoolPaddingError\":\n                return \"Boolean has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"BytesPaddingError\":\n                return \"Bytestring has extra trailing bytes (padding error) (raw value \".concat(errorResult.error.raw, \")\");\n\n              case \"AddressPaddingError\":\n                return \"Address has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"EnumOutOfRangeError\":\n                return \"Invalid \".concat(enumTypeName(errorResult.error.type), \" (numeric value \").concat(errorResult.error.rawAsBN.toString(), \")\");\n\n              case \"EnumPaddingError\":\n                return \"Enum \".concat(enumTypeName(errorResult.error.type), \" has incorrect padding (expected padding: \").concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"EnumNotFoundDecodingError\":\n                return \"Unknown enum type \".concat(enumTypeName(errorResult.error.type), \" of id \").concat(errorResult.error.type.id, \" (numeric value \").concat(errorResult.error.rawAsBN.toString(), \")\");\n\n              case \"ContractPaddingError\":\n                return \"Contract address has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"FunctionExternalNonStackPaddingError\":\n                return \"External function has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"FunctionExternalStackPaddingError\":\n                return \"External function address or selector has extra leading bytes (padding error) (raw address \".concat(errorResult.error.rawAddress, \", raw selector \").concat(errorResult.error.rawSelector, \")\");\n\n              case \"FunctionInternalPaddingError\":\n                return \"Internal function has incorrect padding (expected padding: \".concat(errorResult.error.paddingType, \") (raw value \").concat(errorResult.error.raw, \")\");\n\n              case \"NoSuchInternalFunctionError\":\n                return \"Invalid function (Deployed PC=\".concat(errorResult.error.deployedProgramCounter, \", constructor PC=\").concat(errorResult.error.constructorProgramCounter, \") of contract \").concat(errorResult.error.context.typeName);\n\n              case \"DeployedFunctionInConstructorError\":\n                return \"Deployed-style function (PC=\".concat(errorResult.error.deployedProgramCounter, \") in constructor\");\n\n              case \"MalformedInternalFunctionError\":\n                return \"Malformed internal function w/constructor PC only (value: \".concat(errorResult.error.constructorProgramCounter, \")\");\n\n              case \"IndexedReferenceTypeError\":\n                //for this one we'll bother with some line-wrapping\n                var _firstLine2 = \"Cannot decode indexed parameter of reference type \".concat(errorResult.error.type.typeClass);\n\n                var _secondLine2 = \"(raw value \".concat(errorResult.error.raw, \")\");\n\n                var _breakingSpace2 = _firstLine2.length + _secondLine2.length + 1 > options.breakLength ? \"\\n\" : \" \";\n\n                return _firstLine2 + _breakingSpace2 + _secondLine2;\n\n              case \"OverlongArraysAndStringsNotImplementedError\":\n                return \"Array or string is too long (length \".concat(errorResult.error.lengthAsBN.toString(), \"); decoding is not supported\");\n\n              case \"OverlargePointersNotImplementedError\":\n                return \"Pointer is too large (value \".concat(errorResult.error.pointerAsBN.toString(), \"); decoding is not supported\");\n\n              case \"UserDefinedTypeNotFoundError\":\n              case \"UnsupportedConstantError\":\n              case \"UnusedImmutableError\":\n              case \"ReadErrorStack\":\n              case \"ReadErrorStorage\":\n              case \"ReadErrorBytes\":\n                return Exception.message(errorResult.error);\n              //yay, these five are already defined!\n            }\n          }\n      }\n    }\n  }]);\n\n  return ResultInspector;\n}();\n\nexports.ResultInspector = ResultInspector; //these get their own class to deal with a minor complication\n\nvar ContractInfoInspector = /*#__PURE__*/function () {\n  function ContractInfoInspector(value) {\n    _classCallCheck(this, ContractInfoInspector);\n\n    this.value = value;\n  }\n\n  _createClass(ContractInfoInspector, [{\n    key: util_1.default.inspect.custom,\n    value: function value(depth, options) {\n      switch (this.value.kind) {\n        case \"known\":\n          return options.stylize(this.value.address, \"number\") + \" (\".concat(this.value.class.typeName, \")\");\n\n        case \"unknown\":\n          return options.stylize(this.value.address, \"number\") + \" of unknown class\";\n      }\n    }\n  }]);\n\n  return ContractInfoInspector;\n}();\n\nfunction enumTypeName(enumType) {\n  return (enumType.kind === \"local\" ? enumType.definingContractName + \".\" : \"\") + enumType.typeName;\n} //this function will be used in the future for displaying circular\n//structures\n\n\nfunction formatCircular(loopLength, options) {\n  return options.stylize(\"[Circular (=up \".concat(loopLength, \")]\"), \"special\");\n}\n\nfunction enumFullName(value) {\n  switch (value.type.kind) {\n    case \"local\":\n      return \"\".concat(value.type.definingContractName, \".\").concat(value.type.typeName, \".\").concat(value.value.name);\n\n    case \"global\":\n      return \"\".concat(value.type.typeName, \".\").concat(value.value.name);\n  }\n}\n/**\n * WARNING! Do NOT use this function in real code unless you\n * absolutely have to!  Using it in controlled tests is fine,\n * but do NOT use it in real code if you have any better option!\n * See [[unsafeNativize]] for why!\n */\n\n\nfunction unsafeNativizeVariables(variables) {\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(variables).map(function (_ref16) {\n    var _ref17 = _slicedToArray(_ref16, 2),\n        name = _ref17[0],\n        value = _ref17[1];\n\n    try {\n      return _defineProperty({}, name, unsafeNativize(value));\n    } catch (_) {\n      return undefined; //I guess??\n    }\n  }))));\n}\n\nexports.unsafeNativizeVariables = unsafeNativizeVariables; //HACK! Avoid using!\n\n/**\n * WARNING! Do NOT use this function in real code unless you absolutely have\n * to!  Using it in controlled tests is fine, but do NOT use it in real code if\n * you have any better option!\n *\n * This function is a giant hack.  It will throw exceptions on numbers that\n * don't fit in a Javascript number.  It loses various information.  It was\n * only ever written to support our hacked-together watch expression system,\n * and later repurposed to make testing easier.\n *\n * If you are not doing something as horrible as evaluating user-inputted\n * Javascript expressions meant to operate upon Solidity variables, then you\n * probably have a better option than using this in real code!\n *\n * (For instance, if you just want to nicely print individual values, without\n * attempting to first operate on them via Javascript expressions, we have the\n * [[ResultInspector]] class, which can be used with Node's\n * [util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\n * to do exactly that.)\n *\n * Remember, the decoder output format was made to be machine-readable.  It\n * shouldn't be too hard for you to process.  If it comes to it, copy-paste\n * this code and dehackify it for your use case, which hopefully is more\n * manageable than the one that caused us to write this.\n */\n\nfunction unsafeNativize(result) {\n  return unsafeNativizeWithTable(result, []);\n}\n\nexports.unsafeNativize = unsafeNativize;\n\nfunction unsafeNativizeWithTable(result, seenSoFar) {\n  if (result.kind === \"error\") {\n    debug(\"ErrorResult: %O\", result);\n\n    switch (result.error.kind) {\n      case \"BoolOutOfRangeError\":\n        return true;\n\n      default:\n        return undefined;\n    }\n  } //NOTE: for simplicity, only arrays & structs will call unsafeNativizeWithTable;\n  //other containers will just call unsafeNativize because they can get away with it\n  //(only things that can *be* circular need unsafeNativizeWithTable, not things that\n  //can merely *contain* circularities)\n\n\n  switch (result.type.typeClass) {\n    case \"uint\":\n    case \"int\":\n      return result.value.asBN.toNumber();\n    //WARNING\n\n    case \"bool\":\n      return result.value.asBoolean;\n\n    case \"bytes\":\n      return result.value.asHex;\n\n    case \"address\":\n      return result.value.asAddress;\n\n    case \"string\":\n      {\n        var coercedResult = result;\n\n        switch (coercedResult.value.kind) {\n          case \"valid\":\n            return coercedResult.value.asString;\n\n          case \"malformed\":\n            // this will turn malformed utf-8 into replacement characters (U+FFFD) (WARNING)\n            // note we need to cut off the 0x prefix\n            return Buffer.from(coercedResult.value.asHex.slice(2), \"hex\").toString();\n        }\n      }\n\n    case \"fixed\":\n    case \"ufixed\":\n      //HACK: Big doesn't have a toNumber() method, so we convert to string and then parse with Number\n      //NOTE: we don't bother setting the magic variables Big.NE or Big.PE first, as the choice of\n      //notation shouldn't affect the result (can you believe I have to write this? @_@)\n      return Number(result.value.asBig.toString());\n    //WARNING\n\n    case \"array\":\n      {\n        var _coercedResult7 = result;\n\n        if (_coercedResult7.reference === undefined) {\n          //we need to do some pointer stuff here, so let's first create our new\n          //object we'll be pointing to\n          //[we don't want to alter the original accidentally so let's clone a bit]\n          var output = _toConsumableArray(_coercedResult7.value); //now, we can't use a map here, or we'll screw things up!\n          //we want to *mutate* output, not replace it with a new object\n\n\n          for (var index in output) {\n            output[index] = unsafeNativizeWithTable(output[index], [output].concat(_toConsumableArray(seenSoFar)));\n          }\n\n          return output;\n        } else {\n          return seenSoFar[_coercedResult7.reference - 1];\n        }\n      }\n\n    case \"userDefinedValueType\":\n      {\n        return unsafeNativize(result.value);\n      }\n\n    case \"mapping\":\n      return Object.assign.apply(Object, [{}].concat(_toConsumableArray(result.value.map(function (_ref19) {\n        var key = _ref19.key,\n            value = _ref19.value;\n        return _defineProperty({}, unsafeNativize(key).toString(), unsafeNativize(value));\n      }))));\n\n    case \"struct\":\n      {\n        var _coercedResult8 = result;\n\n        if (_coercedResult8.reference === undefined) {\n          //we need to do some pointer stuff here, so let's first create our new\n          //object we'll be pointing to\n          var _output = Object.assign.apply(Object, [{}].concat(_toConsumableArray(result.value.map(function (_ref21) {\n            var name = _ref21.name,\n                value = _ref21.value;\n            return _defineProperty({}, name, value);\n          })))); //now, we can't use a map here, or we'll screw things up!\n          //we want to *mutate* output, not replace it with a new object\n\n\n          for (var name in _output) {\n            _output[name] = unsafeNativizeWithTable(_output[name], [_output].concat(_toConsumableArray(seenSoFar)));\n          }\n\n          return _output;\n        } else {\n          return seenSoFar[_coercedResult8.reference - 1];\n        }\n      }\n\n    case \"type\":\n      switch (result.type.type.typeClass) {\n        case \"contract\":\n          return Object.assign.apply(Object, [{}].concat(_toConsumableArray(result.value.map(function (_ref23) {\n            var name = _ref23.name,\n                value = _ref23.value;\n            return _defineProperty({}, name, unsafeNativize(value));\n          }))));\n\n        case \"enum\":\n          return Object.assign.apply(Object, [{}].concat(_toConsumableArray(result.value.map(function (enumValue) {\n            return _defineProperty({}, enumValue.value.name, unsafeNativize(enumValue));\n          }))));\n      }\n\n    case \"tuple\":\n      return result.value.map(function (_ref26) {\n        var value = _ref26.value;\n        return unsafeNativize(value);\n      });\n\n    case \"magic\":\n      return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(result.value).map(function (_ref27) {\n        var _ref28 = _slicedToArray(_ref27, 2),\n            key = _ref28[0],\n            value = _ref28[1];\n\n        return _defineProperty({}, key, unsafeNativize(value));\n      }))));\n\n    case \"enum\":\n      return enumFullName(result);\n\n    case \"contract\":\n      return result.value.address;\n    //we no longer include additional info\n\n    case \"function\":\n      switch (result.type.visibility) {\n        case \"external\":\n          {\n            var _coercedResult9 = result;\n\n            switch (_coercedResult9.value.kind) {\n              case \"known\":\n                return \"\".concat(_coercedResult9.value.contract.class.typeName, \"(\").concat(_coercedResult9.value.contract.address, \").\").concat(_coercedResult9.value.abi.name);\n\n              case \"invalid\":\n                return \"\".concat(_coercedResult9.value.contract.class.typeName, \"(\").concat(_coercedResult9.value.contract.address, \").call(\").concat(_coercedResult9.value.selector, \"...)\");\n\n              case \"unknown\":\n                return \"\".concat(_coercedResult9.value.contract.address, \".call(\").concat(_coercedResult9.value.selector, \"...)\");\n            }\n          }\n\n        case \"internal\":\n          {\n            var _coercedResult10 = result;\n\n            switch (_coercedResult10.value.kind) {\n              case \"function\":\n                if (_coercedResult10.value.definedIn) {\n                  return \"\".concat(_coercedResult10.value.definedIn.typeName, \".\").concat(_coercedResult10.value.name);\n                } else {\n                  return _coercedResult10.value.name;\n                }\n\n              case \"exception\":\n                return _coercedResult10.value.deployedProgramCounter === 0 ? \"<zero>\" : \"<uninitialized>\";\n\n              case \"unknown\":\n                return \"<decoding not supported>\";\n            }\n          }\n      }\n\n  }\n}","map":null,"metadata":{},"sourceType":"script"}