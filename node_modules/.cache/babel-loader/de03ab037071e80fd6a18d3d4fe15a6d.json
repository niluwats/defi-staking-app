{"ast":null,"code":"import _toConsumableArray from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { bigUintN } from '../bigUintN.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { applyFlagsOnChars, computeFlagsFromChars, computeNextFlags, computeTogglePositions } from './helpers/ToggleFlags.js';\nexport var MixedCaseArbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(MixedCaseArbitrary, _NextArbitrary);\n\n  function MixedCaseArbitrary(stringArb, toggleCase, untoggleAll) {\n    var _this;\n\n    _classCallCheck(this, MixedCaseArbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MixedCaseArbitrary).call(this));\n    _this.stringArb = stringArb;\n    _this.toggleCase = toggleCase;\n    _this.untoggleAll = untoggleAll;\n    return _this;\n  }\n\n  _createClass(MixedCaseArbitrary, [{\n    key: \"buildContextFor\",\n    value: function buildContextFor(rawStringNextValue, flagsNextValue) {\n      return {\n        rawString: rawStringNextValue.value,\n        rawStringContext: rawStringNextValue.context,\n        flags: flagsNextValue.value,\n        flagsContext: flagsNextValue.context\n      };\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(mrng, biasFactor) {\n      var rawStringNextValue = this.stringArb.generate(mrng, biasFactor);\n\n      var chars = _toConsumableArray(rawStringNextValue.value);\n\n      var togglePositions = computeTogglePositions(chars, this.toggleCase);\n      var flagsArb = convertToNext(bigUintN(togglePositions.length));\n      var flagsNextValue = flagsArb.generate(mrng, undefined);\n      applyFlagsOnChars(chars, flagsNextValue.value, togglePositions, this.toggleCase);\n      return new NextValue(chars.join(''), this.buildContextFor(rawStringNextValue, flagsNextValue));\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      if (typeof value !== 'string') {\n        return false;\n      }\n\n      return this.untoggleAll !== undefined ? this.stringArb.canShrinkWithoutContext(this.untoggleAll(value)) : this.stringArb.canShrinkWithoutContext(value);\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value, context) {\n      var _this2 = this;\n\n      var contextSafe;\n\n      if (context !== undefined) {\n        contextSafe = context;\n      } else {\n        if (this.untoggleAll !== undefined) {\n          var untoggledValue = this.untoggleAll(value);\n\n          var valueChars = _toConsumableArray(value);\n\n          var untoggledValueChars = _toConsumableArray(untoggledValue);\n\n          var togglePositions = computeTogglePositions(untoggledValueChars, this.toggleCase);\n          contextSafe = {\n            rawString: untoggledValue,\n            rawStringContext: undefined,\n            flags: computeFlagsFromChars(untoggledValueChars, valueChars, togglePositions),\n            flagsContext: undefined\n          };\n        } else {\n          contextSafe = {\n            rawString: value,\n            rawStringContext: undefined,\n            flags: BigInt(0),\n            flagsContext: undefined\n          };\n        }\n      }\n\n      var rawString = contextSafe.rawString;\n      var flags = contextSafe.flags;\n      return this.stringArb.shrink(rawString, contextSafe.rawStringContext).map(function (nRawStringNextValue) {\n        var nChars = _toConsumableArray(nRawStringNextValue.value);\n\n        var nTogglePositions = computeTogglePositions(nChars, _this2.toggleCase);\n        var nFlags = computeNextFlags(flags, nTogglePositions.length);\n        applyFlagsOnChars(nChars, nFlags, nTogglePositions, _this2.toggleCase);\n        return new NextValue(nChars.join(''), _this2.buildContextFor(nRawStringNextValue, new NextValue(nFlags, undefined)));\n      }).join(makeLazy(function () {\n        var chars = _toConsumableArray(rawString);\n\n        var togglePositions = computeTogglePositions(chars, _this2.toggleCase);\n        return convertToNext(bigUintN(togglePositions.length)).shrink(flags, contextSafe.flagsContext).map(function (nFlagsNextValue) {\n          var nChars = chars.slice();\n          applyFlagsOnChars(nChars, nFlagsNextValue.value, togglePositions, _this2.toggleCase);\n          return new NextValue(nChars.join(''), _this2.buildContextFor(new NextValue(rawString, contextSafe.rawStringContext), nFlagsNextValue));\n        });\n      }));\n    }\n  }]);\n\n  return MixedCaseArbitrary;\n}(NextArbitrary);","map":null,"metadata":{},"sourceType":"module"}