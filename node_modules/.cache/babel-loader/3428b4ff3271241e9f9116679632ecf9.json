{"ast":null,"code":"\"use strict\";\n/**\n * @protected\n *\n * @packageDocumentation\n */\n\nvar _regeneratorRuntime = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(decodeStack),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(decodeLiteral);\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeLiteral = exports.decodeStack = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:stack:decode\");\n\nvar AbiData = __importStar(require(\"../../abi-data\"));\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar Format = __importStar(require(\"../../format\"));\n\nvar read_1 = __importDefault(require(\"../../read\"));\n\nvar Basic = __importStar(require(\"../../basic\"));\n\nvar Memory = __importStar(require(\"../../memory\"));\n\nvar Storage = __importStar(require(\"../../storage\"));\n\nvar Evm = __importStar(require(\"../../evm\"));\n\nvar errors_1 = require(\"../../errors\");\n\nfunction decodeStack(dataType, pointer, info) {\n  var rawValue, literalPointer;\n  return _regeneratorRuntime.wrap(function decodeStack$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          return _context.delegateYield(read_1.default(pointer, info.state), \"t0\", 2);\n\n        case 2:\n          rawValue = _context.t0;\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t1 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", errors_1.handleDecodingError(dataType, _context.t1));\n\n        case 8:\n          literalPointer = {\n            location: \"stackliteral\",\n            literal: rawValue\n          };\n          return _context.delegateYield(decodeLiteral(dataType, literalPointer, info), \"t2\", 10);\n\n        case 10:\n          return _context.abrupt(\"return\", _context.t2);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nexports.decodeStack = decodeStack;\n\nfunction decodeLiteral(dataType, pointer, info) {\n  var lengthAsBN, locationOnly, address, selectorWord, selector;\n  return _regeneratorRuntime.wrap(function decodeLiteral$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          debug(\"type %O\", dataType);\n          debug(\"pointer %o\", pointer);\n\n          if (!Format.Types.isReferenceType(dataType)) {\n            _context2.next = 19;\n            break;\n          }\n\n          _context2.t0 = dataType.location;\n          _context2.next = _context2.t0 === \"memory\" ? 6 : _context2.t0 === \"storage\" ? 8 : _context2.t0 === \"calldata\" ? 10 : 19;\n          break;\n\n        case 6:\n          return _context2.delegateYield(Memory.Decode.decodeMemoryReferenceByAddress(dataType, pointer, info), \"t1\", 7);\n\n        case 7:\n          return _context2.abrupt(\"return\", _context2.t1);\n\n        case 8:\n          return _context2.delegateYield(Storage.Decode.decodeStorageReferenceByAddress(dataType, pointer, info), \"t2\", 9);\n\n        case 9:\n          return _context2.abrupt(\"return\", _context2.t2);\n\n        case 10:\n          if (!(dataType.typeClass === \"bytes\" || dataType.typeClass === \"string\" || dataType.typeClass === \"array\" && dataType.kind === \"dynamic\")) {\n            _context2.next = 17;\n            break;\n          }\n\n          lengthAsBN = Conversion.toBN(pointer.literal.slice(Evm.Utils.WORD_SIZE));\n          locationOnly = pointer.literal.slice(0, Evm.Utils.WORD_SIZE);\n          return _context2.delegateYield(AbiData.Decode.decodeAbiReferenceByAddress(dataType, {\n            location: \"stackliteral\",\n            literal: locationOnly\n          }, info, {\n            abiPointerBase: 0,\n            lengthOverride: lengthAsBN\n          }), \"t3\", 14);\n\n        case 14:\n          return _context2.abrupt(\"return\", _context2.t3);\n\n        case 17:\n          return _context2.delegateYield(AbiData.Decode.decodeAbiReferenceByAddress(dataType, pointer, info, {\n            abiPointerBase: 0 //let's be explicit\n\n          }), \"t4\", 18);\n\n        case 18:\n          return _context2.abrupt(\"return\", _context2.t4);\n\n        case 19:\n          if (!(dataType.typeClass === \"function\" && dataType.visibility === \"external\")) {\n            _context2.next = 29;\n            break;\n          }\n\n          address = pointer.literal.slice(0, Evm.Utils.WORD_SIZE);\n          selectorWord = pointer.literal.slice(-Evm.Utils.WORD_SIZE);\n\n          if (!(!Basic.Decode.checkPaddingLeft(address, Evm.Utils.ADDRESS_SIZE) || !Basic.Decode.checkPaddingLeft(selectorWord, Evm.Utils.SELECTOR_SIZE))) {\n            _context2.next = 24;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            type: dataType,\n            kind: \"error\",\n            error: {\n              kind: \"FunctionExternalStackPaddingError\",\n              rawAddress: Conversion.toHexString(address),\n              rawSelector: Conversion.toHexString(selectorWord)\n            }\n          });\n\n        case 24:\n          selector = selectorWord.slice(-Evm.Utils.SELECTOR_SIZE);\n          _context2.t5 = dataType;\n          return _context2.delegateYield(Basic.Decode.decodeExternalFunction(address, selector, info), \"t6\", 27);\n\n        case 27:\n          _context2.t7 = _context2.t6;\n          return _context2.abrupt(\"return\", {\n            type: _context2.t5,\n            kind: \"value\",\n            value: _context2.t7\n          });\n\n        case 29:\n          return _context2.delegateYield(Basic.Decode.decodeBasic(dataType, pointer, info, {\n            paddingMode: \"permissive\"\n          }), \"t8\", 30);\n\n        case 30:\n          return _context2.abrupt(\"return\", _context2.t8);\n\n        case 31:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexports.decodeLiteral = decodeLiteral;","map":null,"metadata":{},"sourceType":"script"}