{"ast":null,"code":"export var MIN_VALUE_32 = Math.pow(2, -126) * Math.pow(2, -23);\nexport var MAX_VALUE_32 = Math.pow(2, 127) * (1 + (Math.pow(2, 23) - 1) / Math.pow(2, 23));\nexport var EPSILON_32 = Math.pow(2, -23);\nvar INDEX_POSITIVE_INFINITY = 2139095040;\nvar INDEX_NEGATIVE_INFINITY = -2139095041;\nexport function decomposeFloat(f) {\n  var maxSignificand = 1 + (Math.pow(2, 23) - 1) / Math.pow(2, 23);\n\n  for (var exponent = -126; exponent !== 128; ++exponent) {\n    var powExponent = Math.pow(2, exponent);\n    var maxForExponent = maxSignificand * powExponent;\n\n    if (Math.abs(f) <= maxForExponent) {\n      return {\n        exponent: exponent,\n        significand: f / powExponent\n      };\n    }\n  }\n\n  return {\n    exponent: Number.NaN,\n    significand: Number.NaN\n  };\n}\n\nfunction indexInFloatFromDecomp(exponent, significand) {\n  if (exponent === -126) {\n    return significand * 0x800000;\n  }\n\n  return (exponent + 127) * 0x800000 + (significand - 1) * 0x800000;\n}\n\nexport function floatToIndex(f) {\n  if (f === Number.POSITIVE_INFINITY) {\n    return INDEX_POSITIVE_INFINITY;\n  }\n\n  if (f === Number.NEGATIVE_INFINITY) {\n    return INDEX_NEGATIVE_INFINITY;\n  }\n\n  var decomp = decomposeFloat(f);\n  var exponent = decomp.exponent;\n  var significand = decomp.significand;\n\n  if (Number.isNaN(exponent) || Number.isNaN(significand) || !Number.isInteger(significand * 0x800000)) {\n    return Number.NaN;\n  }\n\n  if (f > 0 || f === 0 && 1 / f === Number.POSITIVE_INFINITY) {\n    return indexInFloatFromDecomp(exponent, significand);\n  } else {\n    return -indexInFloatFromDecomp(exponent, -significand) - 1;\n  }\n}\nexport function indexToFloat(index) {\n  if (index < 0) {\n    return -indexToFloat(-index - 1);\n  }\n\n  if (index === INDEX_POSITIVE_INFINITY) {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  if (index < 0x1000000) {\n    return index * Math.pow(2, -149);\n  }\n\n  var postIndex = index - 0x1000000;\n  var exponent = -125 + (postIndex >> 23);\n  var significand = 1 + (postIndex & 0x7fffff) / 0x800000;\n  return significand * Math.pow(2, exponent);\n}","map":null,"metadata":{},"sourceType":"module"}