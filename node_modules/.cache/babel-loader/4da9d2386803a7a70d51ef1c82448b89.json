{"ast":null,"code":"var utils = require(\"../utils\");\n\nvar web3Utils = require(\"web3-utils\");\n\nmodule.exports = {\n  contract_name: {\n    get: function get() {\n      return this.contractName;\n    },\n    set: function set(val) {\n      this.contractName = val;\n    }\n  },\n  contractName: {\n    get: function get() {\n      return this._json.contractName || \"Contract\";\n    },\n    set: function set(val) {\n      this._json.contractName = val;\n    }\n  },\n  gasMultiplier: {\n    get: function get() {\n      if (this._json.gasMultiplier === undefined) {\n        this._json.gasMultiplier = 1.25;\n      }\n\n      return this._json.gasMultiplier;\n    },\n    set: function set(val) {\n      this._json.gasMultiplier = val;\n    }\n  },\n  timeoutBlocks: {\n    get: function get() {\n      return this._json.timeoutBlocks;\n    },\n    set: function set(val) {\n      this._json.timeoutBlocks = val;\n    }\n  },\n  autoGas: {\n    get: function get() {\n      if (this._json.autoGas === undefined) {\n        this._json.autoGas = true;\n      }\n\n      return this._json.autoGas;\n    },\n    set: function set(val) {\n      this._json.autoGas = val;\n    }\n  },\n  numberFormat: {\n    get: function get() {\n      if (this._json.numberFormat === undefined) {\n        this._json.numberFormat = \"BN\";\n      }\n\n      return this._json.numberFormat;\n    },\n    set: function set(val) {\n      var allowedFormats = [\"BigNumber\", \"BN\", \"String\"];\n      var msg = \"Invalid number format setting: \\\"\".concat(val, \"\\\": \") + \"valid formats are: \".concat(JSON.stringify(allowedFormats), \".\");\n      if (!allowedFormats.includes(val)) throw new Error(msg);\n      this._json.numberFormat = val;\n    }\n  },\n  abi: {\n    get: function get() {\n      return this._json.abi;\n    },\n    set: function set(val) {\n      this._json.abi = val;\n    }\n  },\n  metadata: function metadata() {\n    return this._json.metadata;\n  },\n  network: function network() {\n    var network_id = this.network_id;\n\n    if (network_id == null) {\n      var error = this.contractName + \" has no network id set, cannot lookup artifact data.\" + \" Either set the network manually using \" + this.contractName + \".setNetwork(), run \" + this.contractName + \".detectNetwork(), or use new(),\" + \" at() or deployed() as a thenable which will detect the network automatically.\";\n      throw new Error(error);\n    } // TODO: this might be bad; setting a value on a get.\n\n\n    if (this._json.networks[network_id] == null) {\n      var error = this.contractName + \" has no network configuration\" + \" for its current network id (\" + network_id + \").\";\n      throw new Error(error);\n    }\n\n    var returnVal = this._json.networks[network_id]; // Normalize output\n\n    if (returnVal.links == null) {\n      returnVal.links = {};\n    }\n\n    if (returnVal.events == null) {\n      returnVal.events = {};\n    }\n\n    return returnVal;\n  },\n  networks: function networks() {\n    return this._json.networks;\n  },\n  address: {\n    get: function get() {\n      var address = this.network.address;\n\n      if (address == null) {\n        var error = \"Cannot find deployed address: \" + this.contractName + \" not deployed or address not set.\";\n        throw new Error(error);\n      }\n\n      return address;\n    },\n    set: function set(val) {\n      if (val == null) {\n        throw new Error(\"Cannot set deployed address; malformed value: \" + val);\n      }\n\n      var network_id = this.network_id;\n\n      if (network_id == null) {\n        var error = this.contractName + \" has no network id set, cannot lookup artifact data.\" + \" Either set the network manually using \" + this.contractName + \".setNetwork(), run \" + this.contractName + \".detectNetwork(),\" + \" or use new(), at() or deployed() as a thenable which will\" + \" detect the network automatically.\";\n        throw new Error(error);\n      } // Create a network if we don't have one.\n\n\n      if (this._json.networks[network_id] == null) {\n        this._json.networks[network_id] = {\n          events: {},\n          links: {}\n        };\n      } // Finally, set the address.\n\n\n      this.network.address = val;\n    }\n  },\n  transactionHash: {\n    get: function get() {\n      return this.network.transactionHash;\n    },\n    set: function set(val) {\n      this.network.transactionHash = val;\n    }\n  },\n  links: function links() {\n    if (!this.network_id) {\n      var error = this.contractName + \" has no network id set, cannot lookup artifact data.\" + \" Either set the network manually using \" + this.contractName + \".setNetwork(),\" + \" run \" + this.contractName + \".detectNetwork(), or use new(), at()\" + \" or deployed() as a thenable which will detect the network automatically.\";\n      throw new Error(error);\n    }\n\n    if (this._json.networks[this.network_id] == null) {\n      return {};\n    }\n\n    return this.network.links || {};\n  },\n  events: function events() {\n    var events;\n\n    if (this._json.networks[this.network_id] == null) {\n      events = {};\n    } else {\n      events = this.network.events || {};\n    } // Merge abi events with whatever's returned.\n\n\n    var abi = this.abi;\n    abi.forEach(function (item) {\n      if (item.type !== \"event\") return;\n\n      if (item.signature) {\n        events[item.signature] = item;\n      } else {\n        var signature = item.name + \"(\";\n        item.inputs.forEach(function (input, index) {\n          signature += input.type;\n\n          if (index < item.inputs.length - 1) {\n            signature += \",\";\n          }\n        });\n        signature += \")\";\n        var topic = web3Utils.keccak256(signature);\n        events[topic] = item;\n      }\n    });\n    return events;\n  },\n  binary: function binary() {\n    return utils.linkBytecode(this.bytecode, this.links);\n  },\n  deployedBinary: function deployedBinary() {\n    return utils.linkBytecode(this.deployedBytecode, this.links);\n  },\n  // deprecated; use bytecode\n  unlinked_binary: {\n    get: function get() {\n      return this.bytecode;\n    },\n    set: function set(val) {\n      this.bytecode = val;\n    }\n  },\n  // alias for unlinked_binary; unlinked_binary will eventually be deprecated\n  bytecode: {\n    get: function get() {\n      return this._json.bytecode;\n    },\n    set: function set(val) {\n      this._json.bytecode = val;\n    }\n  },\n  deployedBytecode: {\n    get: function get() {\n      var code = this._json.deployedBytecode;\n\n      if (!code) {\n        return code;\n      }\n\n      if (code.indexOf(\"0x\") !== 0) {\n        code = \"0x\" + code;\n      }\n\n      return code;\n    },\n    set: function set(val) {\n      var code = val;\n\n      if (val && val.indexOf(\"0x\") !== 0) {\n        code = \"0x\" + code;\n      }\n\n      this._json.deployedBytecode = code;\n    }\n  },\n  sourceMap: {\n    get: function get() {\n      return this._json.sourceMap;\n    },\n    set: function set(val) {\n      this._json.sourceMap = val;\n    }\n  },\n  deployedSourceMap: {\n    get: function get() {\n      return this._json.deployedSourceMap;\n    },\n    set: function set(val) {\n      this._json.deployedSourceMap = val;\n    }\n  },\n  source: {\n    get: function get() {\n      return this._json.source;\n    },\n    set: function set(val) {\n      this._json.source = val;\n    }\n  },\n  sourcePath: {\n    get: function get() {\n      return this._json.sourcePath;\n    },\n    set: function set(val) {\n      this._json.sourcePath = val;\n    }\n  },\n  legacyAST: {\n    get: function get() {\n      return this._json.legacyAST;\n    },\n    set: function set(val) {\n      this._json.legacyAST = val;\n    }\n  },\n  ast: {\n    get: function get() {\n      return this._json.ast;\n    },\n    set: function set(val) {\n      this._json.ast = val;\n    }\n  },\n  compiler: {\n    get: function get() {\n      return this._json.compiler;\n    },\n    set: function set(val) {\n      this._json.compiler = val;\n    }\n  },\n  // Deprecated\n  schema_version: function schema_version() {\n    return this.schemaVersion;\n  },\n  schemaVersion: function schemaVersion() {\n    return this._json.schemaVersion;\n  },\n  // deprecated\n  updated_at: function updated_at() {\n    return this.updatedAt;\n  },\n  updatedAt: function updatedAt() {\n    try {\n      return this.network.updatedAt || this._json.updatedAt;\n    } catch (e) {\n      return this._json.updatedAt;\n    }\n  },\n  userdoc: function userdoc() {\n    return this._json.userdoc;\n  },\n  devdoc: function devdoc() {\n    return this._json.devdoc;\n  },\n  networkType: {\n    get: function get() {\n      return this._json.networkType || \"ethereum\";\n    },\n    set: function set(_networkType) {\n      this._json.networkType = _networkType;\n    }\n  },\n  immutableReferences: {\n    get: function get() {\n      return this._json.immutableReferences;\n    },\n    set: function set(refs) {\n      this._json.immutableReferences = refs;\n    }\n  },\n  generatedSources: {\n    get: function get() {\n      return this._json.generatedSources;\n    },\n    set: function set(sources) {\n      this._json.generatedSources = sources;\n    }\n  },\n  deployedGeneratedSources: {\n    get: function get() {\n      return this._json.deployedGeneratedSources;\n    },\n    set: function set(sources) {\n      this._json.deployedGeneratedSources = sources;\n    }\n  },\n  db: {\n    get: function get() {\n      return this._json.db;\n    },\n    set: function set(db) {\n      this._json.db = db;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}