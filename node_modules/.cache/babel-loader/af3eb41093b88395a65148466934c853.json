{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function keyValuePairsToObjectMapper(items) {\n  var obj = {};\n\n  var _iterator = _createForOfIteratorHelper(items),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var keyValue = _step.value;\n      obj[keyValue[0]] = keyValue[1];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return obj;\n}\n\nfunction buildInvalidPropertyNameFilter(obj) {\n  return function invalidPropertyNameFilter(key) {\n    var descriptor = Object.getOwnPropertyDescriptor(obj, key);\n    return descriptor === undefined || !descriptor.configurable || !descriptor.enumerable || !descriptor.writable || descriptor.get !== undefined || descriptor.set !== undefined;\n  };\n}\n\nexport function keyValuePairsToObjectUnmapper(value) {\n  if (typeof value !== 'object' || value === null) {\n    throw new Error('Incompatible instance received: should be a non-null object');\n  }\n\n  if (!('constructor' in value) || value.constructor !== Object) {\n    throw new Error('Incompatible instance received: should be of exact type Object');\n  }\n\n  if (Object.getOwnPropertySymbols(value).length > 0) {\n    throw new Error('Incompatible instance received: should contain symbols');\n  }\n\n  if (Object.getOwnPropertyNames(value).find(buildInvalidPropertyNameFilter(value)) !== undefined) {\n    throw new Error('Incompatible instance received: should contain only c/e/w properties without get/set');\n  }\n\n  return Object.entries(value);\n}","map":null,"metadata":{},"sourceType":"module"}