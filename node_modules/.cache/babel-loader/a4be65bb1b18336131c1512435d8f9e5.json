{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _toConsumableArray from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Stream, stream } from '../../stream/Stream.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { decorateProperty } from './DecorateProperty.js';\nimport { RunnerIterator } from './RunnerIterator.js';\nimport { SourceValuesIterator } from './SourceValuesIterator.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nimport { asyncReportRunDetails, reportRunDetails } from './utils/RunDetailsFormatter.js';\n\nfunction runIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n  var runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n\n  var _iterator = _createForOfIteratorHelper(runner),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var v = _step.value;\n      var out = property.run(v);\n      runner.handleResult(out);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return runner.runExecution;\n}\n\nfunction asyncRunIt(_x, _x2, _x3, _x4, _x5) {\n  return _asyncRunIt.apply(this, arguments);\n}\n\nfunction _asyncRunIt() {\n  _asyncRunIt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n    var runner, _iterator2, _step2, v, out;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n            _iterator2 = _createForOfIteratorHelper(runner);\n            _context.prev = 2;\n\n            _iterator2.s();\n\n          case 4:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 12;\n              break;\n            }\n\n            v = _step2.value;\n            _context.next = 8;\n            return property.run(v);\n\n          case 8:\n            out = _context.sent;\n            runner.handleResult(out);\n\n          case 10:\n            _context.next = 4;\n            break;\n\n          case 12:\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](2);\n\n            _iterator2.e(_context.t0);\n\n          case 17:\n            _context.prev = 17;\n\n            _iterator2.f();\n\n            return _context.finish(17);\n\n          case 20:\n            return _context.abrupt(\"return\", runner.runExecution);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 14, 17, 20]]);\n  }));\n  return _asyncRunIt.apply(this, arguments);\n}\n\nfunction runnerPathWalker(valueProducers, shrink, path) {\n  var pathPoints = path.split(':');\n  var pathStream = stream(valueProducers).drop(pathPoints.length > 0 ? +pathPoints[0] : 0).map(function (producer) {\n    return producer();\n  });\n  var adaptedPath = ['0'].concat(_toConsumableArray(pathPoints.slice(1))).join(':');\n  return stream(pathWalk(adaptedPath, pathStream, shrink)).map(function (v) {\n    return function () {\n      return v;\n    };\n  });\n}\n\nfunction buildInitialValues(valueProducers, shrink, qParams) {\n  if (qParams.path.length === 0) {\n    return stream(valueProducers);\n  }\n\n  return runnerPathWalker(valueProducers, shrink, qParams.path);\n}\n\nfunction check(rawProperty, params) {\n  if (rawProperty == null || rawProperty.generate == null) throw new Error('Invalid property encountered, please use a valid property');\n  if (rawProperty.run == null) throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n  var qParams = QualifiedParameters.read(Object.assign(Object.assign({}, readConfigureGlobal()), params));\n  if (qParams.reporter !== null && qParams.asyncReporter !== null) throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n  if (qParams.asyncReporter !== null && !rawProperty.isAsync()) throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n  var property = decorateProperty(rawProperty, qParams);\n  var generator = toss(property, qParams.seed, qParams.randomType, qParams.examples);\n  var maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n  var maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n  var shrink = property.shrink.bind(property);\n  var initialValues = buildInitialValues(generator, shrink, qParams);\n  var sourceValues = new SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n  var finalShrink = !qParams.endOnFailure ? shrink : Stream.nil;\n  return property.isAsync() ? asyncRunIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then(function (e) {\n    return e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n  }) : runIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\n\nfunction assert(property, params) {\n  var out = check(property, params);\n  if (property.isAsync()) return out.then(asyncReportRunDetails);else reportRunDetails(out);\n}\n\nexport { check, assert };","map":null,"metadata":{},"sourceType":"module"}