{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar encoder = require('./encoder');\n\nvar decoder = require('./decoder');\n\nvar constants = require('./constants');\n\nvar MT = constants.MT;\n/**\n * Wrapper around a JavaScript Map object that allows the keys to be\n * any complex type.  The base Map object allows this, but will only\n * compare the keys by identity, not by value.  CborMap translates keys\n * to CBOR first (and base64's them to ensure by-value comparison).\n *\n * This is not a subclass of Object, because it would be tough to get\n * the semantics to be an exact match.\n *\n * @class CborMap\n * @extends {Map}\n */\n\nvar CborMap = /*#__PURE__*/function (_Map) {\n  _inherits(CborMap, _Map);\n\n  /**\n   * Creates an instance of CborMap.\n   * @param {Iterable<any, any>} [iterable] An Array or other iterable\n   *   object whose elements are key-value pairs (arrays with two elements, e.g.\n   *   <code>[[ 1, 'one' ],[ 2, 'two' ]]</code>). Each key-value pair is added\n   *   to the new CborMap; null values are treated as undefined.\n   */\n  function CborMap(iterable) {\n    _classCallCheck(this, CborMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CborMap).call(this, iterable));\n  }\n  /**\n   * @private\n   */\n\n\n  _createClass(CborMap, [{\n    key: \"get\",\n\n    /**\n     * Retrieve a specified element.\n     *\n     * @param {any} key The key identifying the element to retrieve.\n     *   Can be any type, which will be serialized into CBOR and compared by\n     *   value.\n     * @returns {any} The element if it exists, or <code>undefined</code>.\n     */\n    value: function get(key) {\n      return _get(_getPrototypeOf(CborMap.prototype), \"get\", this).call(this, CborMap._encode(key));\n    }\n    /**\n     * Adds or updates an element with a specified key and value.\n     *\n     * @param {any} key The key identifying the element to store.\n     *   Can be any type, which will be serialized into CBOR and compared by\n     *   value.\n     * @param {any} val The element to store\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, val) {\n      return _get(_getPrototypeOf(CborMap.prototype), \"set\", this).call(this, CborMap._encode(key), val);\n    }\n    /**\n     * Removes the specified element.\n     *\n     * @param {any} key The key identifying the element to delete.\n     *   Can be any type, which will be serialized into CBOR and compared by\n     *   value.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      return _get(_getPrototypeOf(CborMap.prototype), \"delete\", this).call(this, CborMap._encode(key));\n    }\n    /**\n     * Does an element with the specified key exist?\n     *\n     * @param {any} key The key identifying the element to check.\n     *   Can be any type, which will be serialized into CBOR and compared by\n     *   value.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return _get(_getPrototypeOf(CborMap.prototype), \"has\", this).call(this, CborMap._encode(key));\n    }\n    /**\n     * Returns a new Iterator object that contains the keys for each element\n     * in the Map object in insertion order.  The keys are decoded into their\n     * original format.\n     *\n     * @returns {IterableIterator<any>}\n     */\n\n  }, {\n    key: \"keys\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function keys() {\n      var _iterator, _step, k;\n\n      return _regeneratorRuntime.wrap(function keys$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(_get(_getPrototypeOf(CborMap.prototype), \"keys\", this).call(this));\n              _context.prev = 1;\n\n              _iterator.s();\n\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              k = _step.value;\n              _context.next = 7;\n              return CborMap._decode(k);\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, keys, this, [[1, 11, 14, 17]]);\n    })\n    /**\n     * Returns a new Iterator object that contains the [key, value] pairs for\n     * each element in the Map object in insertion order.\n     *\n     * @returns {IterableIterator}\n     */\n\n  }, {\n    key: \"entries\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entries() {\n      var _iterator2, _step2, kv;\n\n      return _regeneratorRuntime.wrap(function entries$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(_get(_getPrototypeOf(CborMap.prototype), \"entries\", this).call(this));\n              _context2.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context2.next = 9;\n                break;\n              }\n\n              kv = _step2.value;\n              _context2.next = 7;\n              return [CborMap._decode(kv[0]), kv[1]];\n\n            case 7:\n              _context2.next = 3;\n              break;\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _iterator2.e(_context2.t0);\n\n            case 14:\n              _context2.prev = 14;\n\n              _iterator2.f();\n\n              return _context2.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, entries, this, [[1, 11, 14, 17]]);\n    })\n    /**\n     * Returns a new Iterator object that contains the [key, value] pairs for\n     * each element in the Map object in insertion order.\n     *\n     * @returns {IterableIterator}\n     */\n\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this.entries();\n    }\n    /**\n     * Executes a provided function once per each key/value pair in the Map\n     * object, in insertion order.\n     *\n     * @param {function(any, any, Map): undefined} fun Function to execute for\n     *  each element, which takes a value, a key, and the Map being traversed.\n     * @param {any} thisArg Value to use as this when executing callback\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fun, thisArg) {\n      if (typeof fun !== 'function') {\n        throw new TypeError('Must be function');\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(_get(_getPrototypeOf(CborMap.prototype), \"entries\", this).call(this)),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var kv = _step3.value;\n          fun.call(this, kv[1], CborMap._decode(kv[0]), this);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * Push the simple value onto the CBOR stream\n     *\n     * @param {Object} gen The generator to push onto\n     * @returns {boolean} true on success\n     */\n\n  }, {\n    key: \"encodeCBOR\",\n    value: function encodeCBOR(gen) {\n      if (!gen._pushInt(this.size, MT.MAP)) {\n        return false;\n      }\n\n      if (gen.canonical) {\n        var _entries = Array.from(_get(_getPrototypeOf(CborMap.prototype), \"entries\", this).call(this)).map(function (kv) {\n          return [Buffer.from(kv[0], 'base64'), kv[1]];\n        });\n\n        _entries.sort(function (a, b) {\n          return a[0].compare(b[0]);\n        });\n\n        var _iterator4 = _createForOfIteratorHelper(_entries),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var kv = _step4.value;\n\n            if (!(gen.push(kv[0]) && gen.pushAny(kv[1]))) {\n              return false;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } else {\n        var _iterator5 = _createForOfIteratorHelper(_get(_getPrototypeOf(CborMap.prototype), \"entries\", this).call(this)),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _kv = _step5.value;\n\n            if (!(gen.push(Buffer.from(_kv[0], 'base64')) && gen.pushAny(_kv[1]))) {\n              return false;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n\n      return true;\n    }\n  }], [{\n    key: \"_encode\",\n    value: function _encode(key) {\n      return encoder.encodeCanonical(key).toString('base64');\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_decode\",\n    value: function _decode(key) {\n      return decoder.decodeFirstSync(key, 'base64');\n    }\n  }]);\n\n  return CborMap;\n}(_wrapNativeSuper(Map));\n\nmodule.exports = CborMap;","map":null,"metadata":{},"sourceType":"script"}