{"ast":null,"code":"import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { CustomEqualSet } from './_internals/helpers/CustomEqualSet.js';\nimport { StrictlyEqualSet } from './_internals/helpers/StrictlyEqualSet.js';\nimport { SameValueSet } from './_internals/helpers/SameValueSet.js';\nimport { SameValueZeroSet } from './_internals/helpers/SameValueZeroSet.js';\n\nfunction buildSetBuilder(constraints) {\n  var compare = constraints.compare || {};\n\n  if (typeof compare === 'function') {\n    var isEqualForBuilder = function isEqualForBuilder(nextA, nextB) {\n      return compare(nextA.value_, nextB.value_);\n    };\n\n    return function () {\n      return new CustomEqualSet(isEqualForBuilder);\n    };\n  }\n\n  var selector = compare.selector || function (v) {\n    return v;\n  };\n\n  var refinedSelector = function refinedSelector(next) {\n    return selector(next.value_);\n  };\n\n  switch (compare.type) {\n    case 'SameValue':\n      return function () {\n        return new SameValueSet(refinedSelector);\n      };\n\n    case 'SameValueZero':\n      return function () {\n        return new SameValueZeroSet(refinedSelector);\n      };\n\n    case 'IsStrictlyEqual':\n    case undefined:\n      return function () {\n        return new StrictlyEqualSet(refinedSelector);\n      };\n  }\n}\n\nfunction buildCompleteSetConstraints(constraints) {\n  var minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n  var maxLength = constraints.maxLength !== undefined ? constraints.maxLength : maxLengthFromMinLength(minLength);\n  var setBuilder = buildSetBuilder(constraints);\n  return {\n    minLength: minLength,\n    maxLength: maxLength,\n    setBuilder: setBuilder\n  };\n}\n\nfunction extractSetConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    var _sargs = args;\n    if (typeof _sargs[0] === 'number') return {\n      maxLength: _sargs[0]\n    };\n    if (typeof _sargs[0] === 'function') return {\n      compare: _sargs[0]\n    };\n    return _sargs[0];\n  }\n\n  if (args[2] === undefined) {\n    var _sargs2 = args;\n    if (typeof _sargs2[1] === 'number') return {\n      minLength: _sargs2[0],\n      maxLength: _sargs2[1]\n    };\n    return {\n      maxLength: _sargs2[0],\n      compare: _sargs2[1]\n    };\n  }\n\n  var sargs = args;\n  return {\n    minLength: sargs[0],\n    maxLength: sargs[1],\n    compare: sargs[2]\n  };\n}\n\nfunction set(arb) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var constraints = buildCompleteSetConstraints(extractSetConstraints(args));\n  var minLength = constraints.minLength;\n  var maxLength = constraints.maxLength;\n  var setBuilder = constraints.setBuilder;\n  var nextArb = convertToNext(arb);\n  var arrayArb = convertFromNext(new ArrayArbitrary(nextArb, minLength, maxLength, setBuilder));\n  if (minLength === 0) return arrayArb;\n  return arrayArb.filter(function (tab) {\n    return tab.length >= minLength;\n  });\n}\n\nexport { set };","map":null,"metadata":{},"sourceType":"module"}