{"ast":null,"code":"'use strict'; // detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n  var result = 0;\n  var maxUsed = 0;\n  var maxWeight = 0;\n\n  var _iterator = _createForOfIteratorHelper(indents),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n      // TODO: use destructuring when targeting Node.js 6\n      var key = entry[0];\n      var val = entry[1];\n      var u = val[0];\n      var w = val[1];\n\n      if (u > maxUsed || u === maxUsed && w > maxWeight) {\n        maxUsed = u;\n        maxWeight = w;\n        result = Number(key);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nmodule.exports = function (str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  } // used to see if tabs or spaces are the most used\n\n\n  var tabs = 0;\n  var spaces = 0; // remember the size of previous line's indentation\n\n  var prev = 0; // remember how many indents/unindents as occurred for a given size\n  // and how much lines follow a given indentation\n  //\n  // indents = {\n  //    3: [1, 0],\n  //    4: [1, 5],\n  //    5: [1, 0],\n  //   12: [1, 0],\n  // }\n\n  var indents = new Map(); // pointer to the array of last used indent\n\n  var current; // whether the last action was an indent (opposed to an unindent)\n\n  var isIndent;\n\n  var _iterator2 = _createForOfIteratorHelper(str.split(/\\n/g)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var line = _step2.value;\n\n      if (!line) {\n        // ignore empty lines\n        continue;\n      }\n\n      var _indent = void 0;\n\n      var matches = line.match(INDENT_RE);\n\n      if (matches) {\n        _indent = matches[0].length;\n\n        if (matches[1]) {\n          spaces++;\n        } else {\n          tabs++;\n        }\n      } else {\n        _indent = 0;\n      }\n\n      var diff = _indent - prev;\n      prev = _indent;\n\n      if (diff) {\n        // an indent or unindent has been detected\n        isIndent = diff > 0;\n        current = indents.get(isIndent ? diff : -diff);\n\n        if (current) {\n          current[0]++;\n        } else {\n          current = [1, 0];\n          indents.set(diff, current);\n        }\n      } else if (current) {\n        // if the last action was an indent, increment the weight\n        current[1] += Number(isIndent);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var amount = getMostUsed(indents);\n  var type;\n  var indent;\n\n  if (!amount) {\n    type = null;\n    indent = '';\n  } else if (spaces >= tabs) {\n    type = 'space';\n    indent = ' '.repeat(amount);\n  } else {\n    type = 'tab';\n    indent = '\\t'.repeat(amount);\n  }\n\n  return {\n    amount: amount,\n    type: type,\n    indent: indent\n  };\n};","map":null,"metadata":{},"sourceType":"script"}