{"ast":null,"code":"\"use strict\";\n\nvar Blockchain = {\n  getBlockByNumber: function getBlockByNumber(blockNumber, provider, callback) {\n    var params = [blockNumber, true];\n    provider.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByNumber\",\n      params: params,\n      id: Date.now()\n    }, callback);\n  },\n  getBlockByHash: function getBlockByHash(blockHash, provider, callback) {\n    var params = [blockHash, true];\n    provider.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByHash\",\n      params: params,\n      id: Date.now()\n    }, callback);\n  },\n  parse: function parse(uri) {\n    var parsed = {};\n    if (uri.indexOf(\"blockchain://\") !== 0) return parsed;\n    var cleanUri = uri.replace(\"blockchain://\", \"\");\n    var pieces = cleanUri.split(\"/block/\");\n    parsed.genesis_hash = \"0x\".concat(pieces[0]);\n    parsed.block_hash = \"0x\".concat(pieces[1]);\n    return parsed;\n  },\n  asURI: function asURI(provider) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var genesis, latest;\n\n      _this.getBlockByNumber(\"0x0\", provider, function (err, _ref) {\n        var result = _ref.result;\n        if (err) return reject(err);\n        genesis = result;\n\n        _this.getBlockByNumber(\"latest\", provider, function (err, _ref2) {\n          var result = _ref2.result;\n          if (err) return reject(err);\n          latest = result;\n          var url = \"blockchain://\".concat(genesis.hash.replace(\"0x\", \"\"), \"/block/\").concat(latest.hash.replace(\"0x\", \"\"));\n          resolve(url);\n        });\n      });\n    });\n  },\n  matches: function matches(uri, provider) {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var parsedUri = _this2.parse(uri);\n\n      var expectedGenesis = parsedUri.genesis_hash;\n      var expectedBlock = parsedUri.block_hash;\n\n      _this2.getBlockByNumber(\"0x0\", provider, function (err, _ref3) {\n        var result = _ref3.result;\n        if (err) return reject(err);\n        var block = result;\n        if (block.hash !== expectedGenesis) return resolve(false);\n\n        _this2.getBlockByHash(expectedBlock, provider, function (err, _ref4) {\n          var result = _ref4.result;\n          // Treat an error as if the block didn't exist. This is because\n          // some clients respond differently.\n          var block = result;\n\n          if (err || block == null) {\n            return resolve(false);\n          }\n\n          resolve(true);\n        });\n      });\n    });\n  }\n};\nmodule.exports = Blockchain;","map":null,"metadata":{},"sourceType":"script"}