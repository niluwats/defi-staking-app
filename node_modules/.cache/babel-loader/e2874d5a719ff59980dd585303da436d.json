{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod } from '../../check/symbols.js';\nimport { Stream } from '../../stream/Stream.js';\nexport var CloneArbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(CloneArbitrary, _NextArbitrary);\n\n  function CloneArbitrary(arb, numValues) {\n    var _this;\n\n    _classCallCheck(this, CloneArbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CloneArbitrary).call(this));\n    _this.arb = arb;\n    _this.numValues = numValues;\n    return _this;\n  }\n\n  _createClass(CloneArbitrary, [{\n    key: \"generate\",\n    value: function generate(mrng, biasFactor) {\n      var items = [];\n\n      if (this.numValues <= 0) {\n        return this.wrapper(items);\n      }\n\n      for (var idx = 0; idx !== this.numValues - 1; ++idx) {\n        items.push(this.arb.generate(mrng.clone(), biasFactor));\n      }\n\n      items.push(this.arb.generate(mrng, biasFactor));\n      return this.wrapper(items);\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      if (!Array.isArray(value) || value.length !== this.numValues) {\n        return false;\n      }\n\n      if (value.length === 0) {\n        return true;\n      }\n\n      for (var index = 1; index < value.length; ++index) {\n        if (!Object.is(value[0], value[index])) {\n          return false;\n        }\n      }\n\n      return this.arb.canShrinkWithoutContext(value[0]);\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value, context) {\n      var _this2 = this;\n\n      if (value.length === 0) {\n        return Stream.nil();\n      }\n\n      return new Stream(this.shrinkImpl(value, context !== undefined ? context : [])).map(function (v) {\n        return _this2.wrapper(v);\n      });\n    }\n  }, {\n    key: \"shrinkImpl\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function shrinkImpl(value, contexts) {\n      var _this3 = this;\n\n      var its, cur;\n      return _regeneratorRuntime.wrap(function shrinkImpl$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              its = value.map(function (v, idx) {\n                return _this3.arb.shrink(v, contexts[idx])[Symbol.iterator]();\n              });\n              cur = its.map(function (it) {\n                return it.next();\n              });\n\n            case 2:\n              if (cur[0].done) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 5;\n              return cur.map(function (c) {\n                return c.value;\n              });\n\n            case 5:\n              cur = its.map(function (it) {\n                return it.next();\n              });\n              _context.next = 2;\n              break;\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, shrinkImpl);\n    })\n  }, {\n    key: \"wrapper\",\n    value: function wrapper(items) {\n      var cloneable = false;\n      var vs = [];\n      var contexts = [];\n\n      for (var idx = 0; idx !== items.length; ++idx) {\n        var s = items[idx];\n        cloneable = cloneable || s.hasToBeCloned;\n        vs.push(s.value);\n        contexts.push(s.context);\n      }\n\n      if (cloneable) {\n        CloneArbitrary.makeItCloneable(vs, items);\n      }\n\n      return new NextValue(vs, contexts);\n    }\n  }], [{\n    key: \"makeItCloneable\",\n    value: function makeItCloneable(vs, shrinkables) {\n      var _this4 = this;\n\n      vs[cloneMethod] = function () {\n        var cloned = [];\n\n        for (var idx = 0; idx !== shrinkables.length; ++idx) {\n          cloned.push(shrinkables[idx].value);\n        }\n\n        _this4.makeItCloneable(cloned, shrinkables);\n\n        return cloned;\n      };\n\n      return vs;\n    }\n  }]);\n\n  return CloneArbitrary;\n}(NextArbitrary);","map":null,"metadata":{},"sourceType":"module"}