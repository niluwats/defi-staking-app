{"ast":null,"code":"import _slicedToArray from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { array } from './array.js';\nimport { buildLowerAlphaArbitrary, buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { filterInvalidSubdomainLabel } from './_internals/helpers/InvalidSubdomainLabelFiIter.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\n\nfunction toSubdomainLabelMapper(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      f = _ref2[0],\n      d = _ref2[1];\n\n  return d === null ? f : \"\".concat(f).concat(d[0]).concat(d[1]);\n}\n\nfunction toSubdomainLabelUnmapper(value) {\n  if (typeof value !== 'string' || value.length === 0) {\n    throw new Error('Unsupported');\n  }\n\n  if (value.length === 1) {\n    return [value[0], null];\n  }\n\n  return [value[0], [value.substring(1, value.length - 1), value[value.length - 1]]];\n}\n\nfunction subdomainLabel() {\n  var alphaNumericArb = buildLowerAlphaNumericArbitrary([]);\n  var alphaNumericHyphenArb = buildLowerAlphaNumericArbitrary(['-']);\n  return convertFromNext(convertToNext(tuple(alphaNumericArb, option(tuple(stringOf(alphaNumericHyphenArb, {\n    maxLength: 61\n  }), alphaNumericArb)))).map(toSubdomainLabelMapper, toSubdomainLabelUnmapper).filter(filterInvalidSubdomainLabel));\n}\n\nfunction labelsMapper(elements) {\n  return \"\".concat(elements[0].join('.'), \".\").concat(elements[1]);\n}\n\nfunction labelsUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  var lastDotIndex = value.lastIndexOf('.');\n  return [value.substring(0, lastDotIndex).split('.'), value.substring(lastDotIndex + 1)];\n}\n\nexport function domain() {\n  var alphaNumericArb = buildLowerAlphaArbitrary([]);\n  var publicSuffixArb = stringOf(alphaNumericArb, {\n    minLength: 2,\n    maxLength: 10\n  });\n  return convertFromNext(convertToNext(tuple(array(subdomainLabel(), {\n    minLength: 1,\n    maxLength: 5\n  }), publicSuffixArb)).map(labelsMapper, labelsUnmapper).filter(function (d) {\n    return d.length <= 255;\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}