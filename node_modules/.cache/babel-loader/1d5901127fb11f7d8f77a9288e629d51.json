{"ast":null,"code":"import _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { PreconditionFailure } from '../precondition/PreconditionFailure.js';\nimport { runIdToFrequency } from './IRawProperty.js';\nimport { readConfigureGlobal } from '../runner/configuration/GlobalParameters.js';\nimport { convertToNext } from '../arbitrary/definition/Converters.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { noUndefinedAsContext, UndefinedContextPlaceholder } from '../../arbitrary/_internals/helpers/NoUndefinedAsContext.js';\nexport var Property = /*#__PURE__*/function () {\n  function Property(rawArb, predicate) {\n    _classCallCheck(this, Property);\n\n    this.predicate = predicate;\n\n    var _ref = readConfigureGlobal() || {},\n        _ref$beforeEach = _ref.beforeEach,\n        beforeEach = _ref$beforeEach === void 0 ? Property.dummyHook : _ref$beforeEach,\n        _ref$afterEach = _ref.afterEach,\n        afterEach = _ref$afterEach === void 0 ? Property.dummyHook : _ref$afterEach,\n        asyncBeforeEach = _ref.asyncBeforeEach,\n        asyncAfterEach = _ref.asyncAfterEach;\n\n    if (asyncBeforeEach !== undefined) {\n      throw Error('\"asyncBeforeEach\" can\\'t be set when running synchronous properties');\n    }\n\n    if (asyncAfterEach !== undefined) {\n      throw Error('\"asyncAfterEach\" can\\'t be set when running synchronous properties');\n    }\n\n    this.beforeEachHook = beforeEach;\n    this.afterEachHook = afterEach;\n    this.arb = convertToNext(rawArb);\n  }\n\n  _createClass(Property, [{\n    key: \"isAsync\",\n    value: function isAsync() {\n      return false;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(mrng, runId) {\n      var value = this.arb.generate(mrng, runId != null ? runIdToFrequency(runId) : undefined);\n      return noUndefinedAsContext(value);\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value) {\n      if (value.context === undefined && !this.arb.canShrinkWithoutContext(value.value_)) {\n        return Stream.nil();\n      }\n\n      var safeContext = value.context !== UndefinedContextPlaceholder ? value.context : undefined;\n      return this.arb.shrink(value.value_, safeContext).map(noUndefinedAsContext);\n    }\n  }, {\n    key: \"run\",\n    value: function run(v) {\n      this.beforeEachHook();\n\n      try {\n        var output = this.predicate(v);\n        return output == null || output === true ? null : 'Property failed by returning false';\n      } catch (err) {\n        if (PreconditionFailure.isFailure(err)) return err;\n        if (err instanceof Error && err.stack) return \"\".concat(err, \"\\n\\nStack trace: \").concat(err.stack);\n        return \"\".concat(err);\n      } finally {\n        this.afterEachHook();\n      }\n    }\n  }, {\n    key: \"beforeEach\",\n    value: function beforeEach(hookFunction) {\n      var previousBeforeEachHook = this.beforeEachHook;\n\n      this.beforeEachHook = function () {\n        return hookFunction(previousBeforeEachHook);\n      };\n\n      return this;\n    }\n  }, {\n    key: \"afterEach\",\n    value: function afterEach(hookFunction) {\n      var previousAfterEachHook = this.afterEachHook;\n\n      this.afterEachHook = function () {\n        return hookFunction(previousAfterEachHook);\n      };\n\n      return this;\n    }\n  }]);\n\n  return Property;\n}();\n\nProperty.dummyHook = function () {};","map":null,"metadata":{},"sourceType":"module"}