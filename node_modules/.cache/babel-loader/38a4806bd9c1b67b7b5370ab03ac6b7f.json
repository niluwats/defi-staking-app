{"ast":null,"code":"\"use strict\";\n/**\n * @protected\n *\n * @packageDocumentation\n */\n\nvar _slicedToArray = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.abiParameterToType = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:abi-data:import\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nfunction abiParameterToType(abi) {\n  var typeName = abi.type;\n  var typeHint = abi.internalType; //first: is it an array?\n\n  var arrayMatch = typeName.match(/(.*)\\[(\\d*)\\]$/);\n\n  if (arrayMatch) {\n    var baseTypeName = arrayMatch[1];\n    var lengthAsString = arrayMatch[2]; //may be empty!\n\n    var baseAbi = Object.assign(Object.assign({}, abi), {\n      type: baseTypeName\n    });\n    var baseType = abiParameterToType(baseAbi);\n\n    if (lengthAsString === \"\") {\n      return {\n        typeClass: \"array\",\n        kind: \"dynamic\",\n        baseType: baseType,\n        typeHint: typeHint\n      };\n    } else {\n      var length = new bn_js_1.default(lengthAsString);\n      return {\n        typeClass: \"array\",\n        kind: \"static\",\n        length: length,\n        baseType: baseType,\n        typeHint: typeHint\n      };\n    }\n  } //otherwise, here are the simple cases\n\n\n  var typeClass = typeName.match(/^([^0-9]+)/)[1];\n\n  switch (typeClass) {\n    case \"uint\":\n    case \"int\":\n      {\n        var bits = typeName.match(/^u?int([0-9]+)/)[1];\n        return {\n          typeClass: typeClass,\n          bits: parseInt(bits),\n          typeHint: typeHint\n        };\n      }\n\n    case \"bytes\":\n      var _length = typeName.match(/^bytes([0-9]*)/)[1];\n\n      if (_length === \"\") {\n        return {\n          typeClass: typeClass,\n          kind: \"dynamic\",\n          typeHint: typeHint\n        };\n      } else {\n        return {\n          typeClass: typeClass,\n          kind: \"static\",\n          length: parseInt(_length),\n          typeHint: typeHint\n        };\n      }\n\n    case \"address\":\n      return {\n        typeClass: typeClass,\n        kind: \"general\",\n        typeHint: typeHint\n      };\n\n    case \"string\":\n    case \"bool\":\n      return {\n        typeClass: typeClass,\n        typeHint: typeHint\n      };\n\n    case \"fixed\":\n    case \"ufixed\":\n      {\n        var _typeName$match = typeName.match(/^u?fixed([0-9]+)x([0-9]+)/),\n            _typeName$match2 = _slicedToArray(_typeName$match, 3),\n            _ = _typeName$match2[0],\n            _bits = _typeName$match2[1],\n            places = _typeName$match2[2];\n\n        return {\n          typeClass: typeClass,\n          bits: parseInt(_bits),\n          places: parseInt(places),\n          typeHint: typeHint\n        };\n      }\n\n    case \"function\":\n      return {\n        typeClass: typeClass,\n        visibility: \"external\",\n        kind: \"general\",\n        typeHint: typeHint\n      };\n\n    case \"tuple\":\n      var memberTypes = abi.components.map(function (component) {\n        return {\n          name: component.name || undefined,\n          type: abiParameterToType(component)\n        };\n      });\n      return {\n        typeClass: typeClass,\n        memberTypes: memberTypes,\n        typeHint: typeHint\n      };\n  }\n}\n\nexports.abiParameterToType = abiParameterToType;","map":null,"metadata":{},"sourceType":"script"}