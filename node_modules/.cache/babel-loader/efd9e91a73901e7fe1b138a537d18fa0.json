{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuorumDefinition = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar abi_coder_1 = require(\"ethers/utils/abi-coder\");\n\nexports.QuorumDefinition = {\n  initNetworkType: function initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // duck punch some of web3's output formatters\n              overrides.getBlock(web3);\n              overrides.getTransaction(web3);\n              overrides.getTransactionReceipt(web3);\n              overrides.decodeParameters(web3);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }\n};\nvar overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.getBlock is a function and doesn't\n  // have a `method` property, which it does\n  getBlock: function getBlock(web3) {\n    // @ts-ignore\n    var _oldBlockFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getBlock.method.outputFormatter = function (block) {\n      var _oldTimestamp = block.timestamp;\n      var _oldGasLimit = block.gasLimit;\n      var _oldGasUsed = block.gasUsed; // Quorum uses nanoseconds instead of seconds in timestamp\n\n      var timestamp = new bn_js_1.default(block.timestamp.slice(2), 16);\n      timestamp = timestamp.div(new bn_js_1.default(10).pow(new bn_js_1.default(9)));\n      block.timestamp = \"0x\" + timestamp.toString(16); // Since we're overwriting the gasLimit/Used later,\n      // it doesn't matter what it is before the call\n      // The same applies to the timestamp, but I reduced\n      // the precision since there was an accurate representation\n      // We do this because Quorum can have large block/transaction\n      // gas limits\n\n      block.gasLimit = \"0x0\";\n      block.gasUsed = \"0x0\"; // @ts-ignore\n\n      var result = _oldBlockFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.timestamp = _oldTimestamp;\n      result.gasLimit = _oldGasLimit;\n      result.gasUsed = _oldGasUsed;\n      return result;\n    };\n  },\n  getTransaction: function getTransaction(web3) {\n    var _oldTransactionFormatter = // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransaction.method.outputFormatter = function (tx) {\n      var _oldGas = tx.gas;\n      tx.gas = \"0x0\";\n\n      var result = _oldTransactionFormatter.call( // @ts-ignore\n      web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gas = _oldGas;\n      return result;\n    };\n  },\n  getTransactionReceipt: function getTransactionReceipt(web3) {\n    var _oldTransactionReceiptFormatter = // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransactionReceipt.method.outputFormatter = function (receipt) {\n      var _oldGasUsed = receipt.gasUsed;\n      receipt.gasUsed = \"0x0\";\n\n      var result = _oldTransactionReceiptFormatter.call( // @ts-ignore\n      web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasUsed = _oldGasUsed;\n      return result;\n    };\n  },\n  // The primary difference between this decodeParameters function and web3's\n  // is that the 'Out of Gas?' zero/null bytes guard has been removed and any\n  // falsy bytes are interpreted as a zero value.\n  decodeParameters: function decodeParameters(web3) {\n    var _oldDecodeParameters = web3.eth.abi.decodeParameters;\n    var ethersAbiCoder = new abi_coder_1.AbiCoder(function (type, value) {\n      if (type.match(/^u?int/) && !Array.isArray(value) && (typeof value !== \"object\" || value.constructor.name !== \"BN\")) {\n        return value.toString();\n      }\n\n      return value;\n    }); // result method\n\n    function Result() {}\n\n    web3.eth.abi.decodeParameters = function (outputs, bytes) {\n      // if bytes is falsy, we'll pass 64 '0' bits to the ethers.js decoder.\n      // the decoder will decode the 64 '0' bits as a 0 value.\n      if (!bytes) bytes = \"0\".repeat(64);\n      var res = ethersAbiCoder.decode( //@ts-ignore 'mapTypes' not existing on type 'ABI'\n      web3.eth.abi.mapTypes(outputs), \"0x\".concat(bytes.replace(/0x/i, \"\"))); //@ts-ignore complaint regarding Result method\n\n      var returnValue = new Result();\n      returnValue.__length__ = 0;\n      outputs.forEach(function (output, i) {\n        var decodedValue = res[returnValue.__length__];\n        decodedValue = decodedValue === \"0x\" ? null : decodedValue;\n        returnValue[i] = decodedValue; // @ts-ignore object not having name key\n\n        if (typeof output === \"object\" && output.name) {\n          // @ts-ignore object not having name key\n          returnValue[output.name] = decodedValue;\n        }\n\n        returnValue.__length__++;\n      });\n      return returnValue;\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}