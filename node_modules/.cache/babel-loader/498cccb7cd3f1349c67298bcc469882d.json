{"ast":null,"code":"// Tweaked version of nathan7's binary-parse-stream\n// (see https://github.com/nathan7/binary-parse-stream)\n// Uses NoFilter instead of the readable in the original.  Removes\n// the ability to read -1, which was odd and un-needed.\n// License for binary-parse-stream: MIT\n// binary-parse-stream is now unmaintained, so I'm going to rewrite it as\n// more modern JS so I can get tsc to help check types.\n'use strict';\n\nvar _regeneratorRuntime = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Stream = require('stream');\n\nvar NoFilter = require('nofilter');\n\nvar TransformStream = Stream.Transform;\n/**\n * BinaryParseStream is a TransformStream that consumes buffers and outputs\n * objects on the other end.  It expects your subclass to implement a `_parse`\n * method that is a generator.  When your generator yields a number, it'll be\n * fed a buffer of that length from the input.  When your generator returns,\n * the return value will be pushed to the output side.\n *\n * @class BinaryParseStream\n * @extends {TransformStream}\n */\n\nvar BinaryParseStream = /*#__PURE__*/function (_TransformStream) {\n  _inherits(BinaryParseStream, _TransformStream);\n\n  function BinaryParseStream(options) {\n    var _this;\n\n    _classCallCheck(this, BinaryParseStream);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BinaryParseStream).call(this, options)); // doesn't work to pass these in as opts, for some reason\n\n    _this['_writableState'].objectMode = false;\n    _this['_readableState'].objectMode = true;\n    _this.bs = new NoFilter();\n\n    _this.__restart();\n\n    return _this;\n  }\n\n  _createClass(BinaryParseStream, [{\n    key: \"_transform\",\n    value: function _transform(fresh, encoding, cb) {\n      this.bs.write(fresh);\n\n      while (this.bs.length >= this.__needed) {\n        var ret = void 0;\n        var chunk = this.__needed === null ? undefined : this.bs.read(this.__needed);\n\n        try {\n          ret = this.__parser.next(chunk);\n        } catch (e) {\n          return cb(e);\n        }\n\n        if (this.__needed) {\n          this.__fresh = false;\n        }\n\n        if (!ret.done) {\n          this.__needed = ret.value || 0;\n        } else {\n          this.push(ret.value);\n\n          this.__restart();\n        }\n      }\n\n      return cb();\n    }\n    /**\n     * @abstract\n     */\n\n    /* istanbul ignore next */\n\n  }, {\n    key: \"_parse\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function _parse() {\n      return _regeneratorRuntime.wrap(function _parse$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              throw new Error('Must be implemented in subclass');\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _parse);\n    })\n  }, {\n    key: \"__restart\",\n    value: function __restart() {\n      this.__needed = null;\n      this.__parser = this._parse();\n      this.__fresh = true;\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(cb) {\n      cb(this.__fresh ? null : new Error('unexpected end of input'));\n    }\n  }]);\n\n  return BinaryParseStream;\n}(TransformStream);\n\nmodule.exports = BinaryParseStream;","map":null,"metadata":{},"sourceType":"script"}