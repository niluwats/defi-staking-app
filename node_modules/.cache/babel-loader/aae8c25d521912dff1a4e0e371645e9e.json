{"ast":null,"code":"import _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { noUndefinedAsContext, UndefinedContextPlaceholder } from './helpers/NoUndefinedAsContext.js';\nexport var AlwaysShrinkableArbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(AlwaysShrinkableArbitrary, _NextArbitrary);\n\n  function AlwaysShrinkableArbitrary(arb) {\n    var _this;\n\n    _classCallCheck(this, AlwaysShrinkableArbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AlwaysShrinkableArbitrary).call(this));\n    _this.arb = arb;\n    return _this;\n  }\n\n  _createClass(AlwaysShrinkableArbitrary, [{\n    key: \"generate\",\n    value: function generate(mrng, biasFactor) {\n      var value = this.arb.generate(mrng, biasFactor);\n      return noUndefinedAsContext(value);\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      return true;\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value, context) {\n      if (context === undefined && !this.arb.canShrinkWithoutContext(value)) {\n        return Stream.nil();\n      }\n\n      var safeContext = context !== UndefinedContextPlaceholder ? context : undefined;\n      return this.arb.shrink(value, safeContext).map(noUndefinedAsContext);\n    }\n  }]);\n\n  return AlwaysShrinkableArbitrary;\n}(NextArbitrary);","map":null,"metadata":{},"sourceType":"module"}