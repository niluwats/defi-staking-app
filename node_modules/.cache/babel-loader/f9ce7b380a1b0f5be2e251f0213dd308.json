{"ast":null,"code":"var _defineProperty = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar execute = require(\"../execute\");\n\nvar debug = require(\"debug\")(\"contract:contract:bootstrap\");\n\nmodule.exports = function (fn) {\n  // Add our static methods\n  // Add something here about excluding send, privately defined methods\n  Object.keys(fn._constructorMethods).forEach(function (key) {\n    fn[key] = fn._constructorMethods[key].bind(fn);\n  }); // Add our properties.\n\n  Object.keys(fn._properties).forEach(function (key) {\n    fn.addProp(key, fn._properties[key]);\n  }); // estimateGas & request as sub-property of new\n\n  fn[\"new\"].estimateGas = execute.estimateDeployment.bind(fn);\n  fn[\"new\"].request = execute.requestDeployment.bind(fn); //add enumerations. (probably these should go in\n  //constructorMethods.js, but this is easier to modify... we'll\n  //redo all this in the rewrite anyway)\n\n  if (fn._json) {\n    //getters will throw otherwise!\n    if (fn.ast) {\n      //note this was set up earlier\n      var node = locateNode(fn.contractName, fn.ast); //name also set up earlier\n\n      if (node) {\n        fn.enums = extractEnums(node);\n\n        for (var _i = 0, _Object$entries = Object.entries(fn.enums); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              name = _Object$entries$_i[0],\n              enumeration = _Object$entries$_i[1];\n\n          //enum is a reserved word :P\n          if (!(name in fn)) {\n            //don't overwrite anything!\n            fn[name] = enumeration;\n          }\n        }\n      }\n    }\n  }\n\n  return fn;\n};\n\nfunction locateNode(name, ast) {\n  if (ast.nodeType === \"SourceUnit\") {\n    return ast.nodes.find(function (node) {\n      return node.nodeType === \"ContractDefinition\" && node.name === name;\n    });\n  } else {\n    return undefined;\n  }\n}\n\nfunction extractEnums(node) {\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(node.nodes.filter(function (definition) {\n    return definition.nodeType === \"EnumDefinition\";\n  }).map(function (definition) {\n    return _defineProperty({}, definition.name, Object.assign.apply(Object, [{}].concat(_toConsumableArray(definition.members.map(function (member, index) {\n      return _defineProperty({}, member.name, index);\n    })))));\n  }))));\n}","map":null,"metadata":{},"sourceType":"script"}