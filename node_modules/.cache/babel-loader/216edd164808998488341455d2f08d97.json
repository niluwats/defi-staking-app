{"ast":null,"code":"var _objectSpread = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _require = require(\"@ensdomains/ensjs\"),\n    ENSJS = _require.default,\n    getEnsAddress = _require.getEnsAddress;\n\nvar _require2 = require(\"web3-utils\"),\n    isAddress = _require2.isAddress;\n\nmodule.exports = {\n  convertENSNames: function () {\n    var _convertENSNames = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var ens, inputArgs, methodABI, inputParams, web3, networkId, registryAddress, args, params;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ens = _ref.ens, inputArgs = _ref.inputArgs, methodABI = _ref.methodABI, inputParams = _ref.inputParams, web3 = _ref.web3, networkId = _ref.networkId;\n              registryAddress = ens.registryAddress;\n\n              if (!(inputArgs.length && methodABI)) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 5;\n              return this.convertENSArgsNames({\n                inputArgs: inputArgs,\n                methodABI: methodABI,\n                web3: web3,\n                registryAddress: registryAddress,\n                networkId: networkId\n              });\n\n            case 5:\n              args = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 8:\n              args = inputArgs;\n\n            case 9:\n              if (!inputParams) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 12;\n              return this.convertENSParamsNames({\n                inputParams: inputParams,\n                web3: web3,\n                registryAddress: registryAddress,\n                networkId: networkId\n              });\n\n            case 12:\n              params = _context.sent;\n\n            case 13:\n              return _context.abrupt(\"return\", {\n                args: args,\n                params: params\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function convertENSNames(_x) {\n      return _convertENSNames.apply(this, arguments);\n    }\n\n    return convertENSNames;\n  }(),\n  getNewENSJS: function getNewENSJS(_ref2) {\n    var provider = _ref2.provider,\n        registryAddress = _ref2.registryAddress,\n        networkId = _ref2.networkId;\n    return new ENSJS({\n      provider: provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n  resolveNameToAddress: function () {\n    var _resolveNameToAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n      var name, provider, registryAddress, networkId, ensjs, message;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              name = _ref3.name, provider = _ref3.provider, registryAddress = _ref3.registryAddress, networkId = _ref3.networkId;\n              _context2.prev = 1;\n              ensjs = this.getNewENSJS({\n                provider: provider,\n                registryAddress: registryAddress,\n                networkId: networkId\n              });\n              _context2.next = 9;\n              break;\n\n            case 5:\n              _context2.prev = 5;\n              _context2.t0 = _context2[\"catch\"](1);\n              message = \"There was a problem initializing the ENS library.\" + \"Please ensure you have the address of the registry set correctly.\" + \" Truffle is currently using \".concat(registryAddress, \".\");\n              throw new Error(\"\".concat(message, \" - \").concat(_context2.t0.message));\n\n            case 9:\n              _context2.next = 11;\n              return ensjs.name(name).getAddress(\"ETH\");\n\n            case 11:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[1, 5]]);\n    }));\n\n    function resolveNameToAddress(_x2) {\n      return _resolveNameToAddress.apply(this, arguments);\n    }\n\n    return resolveNameToAddress;\n  }(),\n  convertENSArgsNames: function convertENSArgsNames(_ref4) {\n    var _this = this;\n\n    var inputArgs = _ref4.inputArgs,\n        methodABI = _ref4.methodABI,\n        web3 = _ref4.web3,\n        registryAddress = _ref4.registryAddress,\n        networkId = _ref4.networkId;\n    if (methodABI.inputs.length === 0) return inputArgs;\n    var convertedNames = inputArgs.map(function (argument, index) {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        var argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return _this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress: registryAddress,\n          networkId: networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n  convertENSParamsNames: function () {\n    var _convertENSParamsNames = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref5) {\n      var _this2 = this;\n\n      var inputParams, web3, registryAddress, networkId, outputParams, newFrom, newAccessList;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              inputParams = _ref5.inputParams, web3 = _ref5.web3, registryAddress = _ref5.registryAddress, networkId = _ref5.networkId;\n              outputParams = inputParams;\n\n              if (!(inputParams.from && !isAddress(inputParams.from))) {\n                _context4.next = 7;\n                break;\n              }\n\n              _context4.next = 5;\n              return this.resolveNameToAddress({\n                name: inputParams.from,\n                provider: web3.currentProvider,\n                networkId: networkId,\n                registryAddress: registryAddress\n              });\n\n            case 5:\n              newFrom = _context4.sent;\n              outputParams = _objectSpread({}, outputParams, {\n                from: newFrom\n              });\n\n            case 7:\n              if (!(inputParams.accessList && Array.isArray(inputParams.accessList))) {\n                _context4.next = 12;\n                break;\n              }\n\n              _context4.next = 10;\n              return Promise.all(inputParams.accessList.map( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(entry) {\n                  var newAddress;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          if (!(entry && entry.address && !isAddress(entry.address))) {\n                            _context3.next = 7;\n                            break;\n                          }\n\n                          _context3.next = 3;\n                          return _this2.resolveNameToAddress({\n                            name: entry.address,\n                            provider: web3.currentProvider,\n                            networkId: networkId,\n                            registryAddress: registryAddress\n                          });\n\n                        case 3:\n                          newAddress = _context3.sent;\n                          return _context3.abrupt(\"return\", _objectSpread({}, entry, {\n                            address: newAddress\n                          }));\n\n                        case 7:\n                          return _context3.abrupt(\"return\", entry);\n\n                        case 8:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x4) {\n                  return _ref6.apply(this, arguments);\n                };\n              }()));\n\n            case 10:\n              newAccessList = _context4.sent;\n              outputParams = _objectSpread({}, outputParams, {\n                accessList: newAccessList\n              });\n\n            case 12:\n              return _context4.abrupt(\"return\", outputParams);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function convertENSParamsNames(_x3) {\n      return _convertENSParamsNames.apply(this, arguments);\n    }\n\n    return convertENSParamsNames;\n  }()\n};","map":null,"metadata":{},"sourceType":"script"}