{"ast":null,"code":"import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { BigIntArbitrary } from './_internals/BigIntArbitrary.js';\n\nfunction computeDefaultMax() {\n  return (BigInt(1) << BigInt(256)) - BigInt(1);\n}\n\nfunction bigUint(constraints) {\n  var requestedMax = typeof constraints === 'object' ? constraints.max : constraints;\n  var max = requestedMax !== undefined ? requestedMax : computeDefaultMax();\n\n  if (max < 0) {\n    throw new Error('fc.bigUint expects max to be greater than or equal to zero');\n  }\n\n  var arb = new BigIntArbitrary(BigInt(0), max);\n  return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\n\nexport { bigUint };","map":null,"metadata":{},"sourceType":"module"}