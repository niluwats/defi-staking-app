{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.collectAllocationInfo = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:abi-data:allocate:utils\");\n\nvar Compilations = __importStar(require(\"../../compilations\"));\n\nvar compile_common_1 = require(\"@truffle/compile-common\");\n\nvar Contexts = __importStar(require(\"../../contexts\"));\n\nvar Abi = __importStar(require(\"@truffle/abi-utils\"));\n\nfunction collectAllocationInfo(compilations) {\n  var contexts = {};\n  var deployedContexts = {};\n  var contractsAndContexts = [];\n\n  var _iterator = _createForOfIteratorHelper(compilations),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var compilation = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(compilation.contracts),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var contract = _step2.value;\n          var node = Compilations.Utils.getContractNode(contract, compilation);\n          var deployedContext = undefined;\n          var constructorContext = undefined;\n          var deployedBytecode = compile_common_1.Shims.NewToLegacy.forBytecode(contract.deployedBytecode);\n          var bytecode = compile_common_1.Shims.NewToLegacy.forBytecode(contract.bytecode);\n\n          if (deployedBytecode && deployedBytecode !== \"0x\") {\n            deployedContext = Contexts.Utils.makeContext(contract, node, compilation);\n            contexts[deployedContext.context] = deployedContext; //note that we don't set up deployedContexts until after normalization!\n          }\n\n          if (bytecode && bytecode !== \"0x\") {\n            constructorContext = Contexts.Utils.makeContext(contract, node, compilation, true);\n            contexts[constructorContext.context] = constructorContext;\n          }\n\n          contractsAndContexts.push({\n            contract: contract,\n            node: node,\n            deployedContext: deployedContext,\n            constructorContext: constructorContext,\n            compilationId: compilation.id\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  debug(\"known contexts: %o\", Object.keys(contexts));\n  contexts = Contexts.Utils.normalizeContexts(contexts);\n  deployedContexts = Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.values(contexts).map(function (context) {\n    return !context.isConstructor ? _defineProperty({}, context.context, context) : {};\n  }))));\n\n  for (var _i = 0, _contractsAndContexts = contractsAndContexts; _i < _contractsAndContexts.length; _i++) {\n    var contractAndContexts = _contractsAndContexts[_i];\n\n    //change everything to normalized version\n    if (contractAndContexts.deployedContext) {\n      contractAndContexts.deployedContext = contexts[contractAndContexts.deployedContext.context]; //get normalized version\n    }\n\n    if (contractAndContexts.constructorContext) {\n      contractAndContexts.constructorContext = contexts[contractAndContexts.constructorContext.context]; //get normalized version\n    }\n  }\n\n  var allocationInfo = contractsAndContexts.map(function (_ref2) {\n    var _ref2$contract = _ref2.contract,\n        abi = _ref2$contract.abi,\n        compiler = _ref2$contract.compiler,\n        immutableReferences = _ref2$contract.immutableReferences,\n        compilationId = _ref2.compilationId,\n        node = _ref2.node,\n        deployedContext = _ref2.deployedContext,\n        constructorContext = _ref2.constructorContext;\n    return {\n      abi: Abi.normalize(abi),\n      compilationId: compilationId,\n      compiler: compiler,\n      contractNode: node,\n      deployedContext: deployedContext,\n      constructorContext: constructorContext,\n      immutableReferences: immutableReferences\n    };\n  });\n  return {\n    contexts: contexts,\n    deployedContexts: deployedContexts,\n    contractsAndContexts: contractsAndContexts,\n    allocationInfo: allocationInfo\n  };\n}\n\nexports.collectAllocationInfo = collectAllocationInfo;","map":null,"metadata":{},"sourceType":"script"}