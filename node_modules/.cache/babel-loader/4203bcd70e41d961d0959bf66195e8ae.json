{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { filterHelper, flatMapHelper, joinHelper, mapHelper, nilHelper, takeNHelper, takeWhileHelper } from './StreamHelpers.js';\nexport var Stream = /*#__PURE__*/function () {\n  function Stream(g) {\n    _classCallCheck(this, Stream);\n\n    this.g = g;\n  }\n\n  _createClass(Stream, [{\n    key: \"next\",\n    value: function next() {\n      return this.g.next();\n    }\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return this.g;\n    }\n  }, {\n    key: \"map\",\n    value: function map(f) {\n      return new Stream(mapHelper(this.g, f));\n    }\n  }, {\n    key: \"flatMap\",\n    value: function flatMap(f) {\n      return new Stream(flatMapHelper(this.g, f));\n    }\n  }, {\n    key: \"dropWhile\",\n    value: function dropWhile(f) {\n      var _marked = /*#__PURE__*/_regeneratorRuntime.mark(helper);\n\n      var foundEligible = false;\n\n      function helper(v) {\n        return _regeneratorRuntime.wrap(function helper$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(foundEligible || !f(v))) {\n                  _context.next = 4;\n                  break;\n                }\n\n                foundEligible = true;\n                _context.next = 4;\n                return v;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _marked);\n      }\n\n      return this.flatMap(helper);\n    }\n  }, {\n    key: \"drop\",\n    value: function drop(n) {\n      var idx = 0;\n\n      function helper() {\n        return idx++ < n;\n      }\n\n      return this.dropWhile(helper);\n    }\n  }, {\n    key: \"takeWhile\",\n    value: function takeWhile(f) {\n      return new Stream(takeWhileHelper(this.g, f));\n    }\n  }, {\n    key: \"take\",\n    value: function take(n) {\n      return new Stream(takeNHelper(this.g, n));\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(f) {\n      return new Stream(filterHelper(this.g, f));\n    }\n  }, {\n    key: \"every\",\n    value: function every(f) {\n      var _iterator = _createForOfIteratorHelper(this.g),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var v = _step.value;\n\n          if (!f(v)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"has\",\n    value: function has(f) {\n      var _iterator2 = _createForOfIteratorHelper(this.g),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var v = _step2.value;\n\n          if (f(v)) {\n            return [true, v];\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return [false, null];\n    }\n  }, {\n    key: \"join\",\n    value: function join() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n\n      return new Stream(joinHelper(this.g, others));\n    }\n  }, {\n    key: \"getNthOrLast\",\n    value: function getNthOrLast(nth) {\n      var remaining = nth;\n      var last = null;\n\n      var _iterator3 = _createForOfIteratorHelper(this.g),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var v = _step3.value;\n          if (remaining-- === 0) return v;\n          last = v;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return last;\n    }\n  }], [{\n    key: \"nil\",\n    value: function nil() {\n      return new Stream(nilHelper());\n    }\n  }, {\n    key: \"of\",\n    value: function of() {\n      for (var _len2 = arguments.length, elements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        elements[_key2] = arguments[_key2];\n      }\n\n      return new Stream(elements[Symbol.iterator]());\n    }\n  }]);\n\n  return Stream;\n}();\nexport function stream(g) {\n  return new Stream(g);\n}","map":null,"metadata":{},"sourceType":"module"}