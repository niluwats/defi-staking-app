{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSkippedInMemoryStructs = exports.getMemoryAllocations = void 0;\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:memory:allocate\");\n\nvar Evm = __importStar(require(\"../../evm\"));\n\nfunction getMemoryAllocations(userDefinedTypes) {\n  var allocations = {};\n\n  for (var _i = 0, _Object$values = Object.values(userDefinedTypes); _i < _Object$values.length; _i++) {\n    var dataType = _Object$values[_i];\n\n    if (dataType.typeClass === \"struct\") {\n      allocations[dataType.id] = allocateStruct(dataType);\n    }\n  }\n\n  return allocations;\n}\n\nexports.getMemoryAllocations = getMemoryAllocations;\n\nfunction isSkippedInMemoryStructs(dataType) {\n  if (dataType.typeClass === \"mapping\") {\n    return true;\n  } else if (dataType.typeClass === \"array\") {\n    return isSkippedInMemoryStructs(dataType.baseType);\n  } else {\n    return false;\n  }\n}\n\nexports.isSkippedInMemoryStructs = isSkippedInMemoryStructs; //unlike in storage and calldata, we'll just return the one allocation, nothing fancy\n//that's because allocating one struct can never necessitate allocating another\n\nfunction allocateStruct(dataType) {\n  var memberAllocations = [];\n  var position = 0;\n\n  var _iterator = _createForOfIteratorHelper(dataType.memberTypes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          name = _step$value.name,\n          memberType = _step$value.type;\n      var length = isSkippedInMemoryStructs(memberType) ? 0 : Evm.Utils.WORD_SIZE;\n      memberAllocations.push({\n        name: name,\n        type: memberType,\n        pointer: {\n          location: \"memory\",\n          start: position,\n          length: length\n        }\n      });\n      position += length;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    members: memberAllocations\n  };\n}","map":null,"metadata":{},"sourceType":"script"}