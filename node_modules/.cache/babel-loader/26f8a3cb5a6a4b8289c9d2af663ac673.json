{"ast":null,"code":"import _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { integer } from '../integer.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nexport var ArrayArbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(ArrayArbitrary, _NextArbitrary);\n\n  function ArrayArbitrary(arb, minLength, maxLength, setBuilder) {\n    var _this;\n\n    _classCallCheck(this, ArrayArbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayArbitrary).call(this));\n    _this.arb = arb;\n    _this.minLength = minLength;\n    _this.maxLength = maxLength;\n    _this.setBuilder = setBuilder;\n    _this.lengthArb = convertToNext(integer(minLength, maxLength));\n    return _this;\n  }\n\n  _createClass(ArrayArbitrary, [{\n    key: \"preFilter\",\n    value: function preFilter(tab) {\n      if (this.setBuilder === undefined) {\n        return tab;\n      }\n\n      var s = this.setBuilder();\n\n      for (var index = 0; index !== tab.length; ++index) {\n        s.tryAdd(tab[index]);\n      }\n\n      return s.getData();\n    }\n  }, {\n    key: \"generateNItemsNoDuplicates\",\n    value: function generateNItemsNoDuplicates(setBuilder, N, mrng, biasFactorItems) {\n      var numSkippedInRow = 0;\n      var s = setBuilder();\n\n      while (s.size() < N && numSkippedInRow < this.maxLength) {\n        var current = this.arb.generate(mrng, biasFactorItems);\n\n        if (s.tryAdd(current)) {\n          numSkippedInRow = 0;\n        } else {\n          numSkippedInRow += 1;\n        }\n      }\n\n      return s.getData();\n    }\n  }, {\n    key: \"generateNItems\",\n    value: function generateNItems(N, mrng, biasFactorItems) {\n      var items = [];\n\n      for (var index = 0; index !== N; ++index) {\n        var current = this.arb.generate(mrng, biasFactorItems);\n        items.push(current);\n      }\n\n      return items;\n    }\n  }, {\n    key: \"wrapper\",\n    value: function wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext, startIndex) {\n      var items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n      var cloneable = false;\n      var vs = [];\n      var itemsContexts = [];\n\n      for (var idx = 0; idx !== items.length; ++idx) {\n        var s = items[idx];\n        cloneable = cloneable || s.hasToBeCloned;\n        vs.push(s.value);\n        itemsContexts.push(s.context);\n      }\n\n      if (cloneable) {\n        ArrayArbitrary.makeItCloneable(vs, items);\n      }\n\n      var context = {\n        shrunkOnce: shrunkOnce,\n        lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined ? itemsRawLengthContext : undefined,\n        itemsContexts: itemsContexts,\n        startIndex: startIndex\n      };\n      return new NextValue(vs, context);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(mrng, biasFactor) {\n      var biasMeta = this.applyBias(mrng, biasFactor);\n      var targetSize = biasMeta.size;\n      var items = this.setBuilder !== undefined ? this.generateNItemsNoDuplicates(this.setBuilder, targetSize, mrng, biasMeta.biasFactorItems) : this.generateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n      return this.wrapper(items, false, undefined, 0);\n    }\n  }, {\n    key: \"applyBias\",\n    value: function applyBias(mrng, biasFactor) {\n      if (biasFactor === undefined) {\n        return {\n          size: this.lengthArb.generate(mrng, undefined).value\n        };\n      }\n\n      if (this.minLength === this.maxLength) {\n        return {\n          size: this.lengthArb.generate(mrng, undefined).value,\n          biasFactorItems: biasFactor\n        };\n      }\n\n      if (mrng.nextInt(1, biasFactor) !== 1) {\n        return {\n          size: this.lengthArb.generate(mrng, undefined).value\n        };\n      }\n\n      if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxLength) {\n        return {\n          size: this.lengthArb.generate(mrng, undefined).value,\n          biasFactorItems: biasFactor\n        };\n      }\n\n      var maxBiasedLength = this.minLength + Math.floor(Math.log(this.maxLength - this.minLength) / Math.log(2));\n      var targetSizeValue = convertToNext(integer(this.minLength, maxBiasedLength)).generate(mrng, undefined);\n      return {\n        size: targetSizeValue.value,\n        biasFactorItems: biasFactor\n      };\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n        return false;\n      }\n\n      for (var index = 0; index !== value.length; ++index) {\n        if (!(index in value)) {\n          return false;\n        }\n\n        if (!this.arb.canShrinkWithoutContext(value[index])) {\n          return false;\n        }\n      }\n\n      var filtered = this.preFilter(value.map(function (item) {\n        return new NextValue(item, undefined);\n      }));\n      return filtered.length === value.length;\n    }\n  }, {\n    key: \"shrinkItemByItem\",\n    value: function shrinkItemByItem(value, safeContext, endIndex) {\n      var _this2 = this;\n\n      var shrinks = Stream.nil();\n\n      var _loop = function _loop(index) {\n        shrinks = shrinks.join(makeLazy(function () {\n          return _this2.arb.shrink(value[index], safeContext.itemsContexts[index]).map(function (v) {\n            var beforeCurrent = value.slice(0, index).map(function (v, i) {\n              return new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i]);\n            });\n            var afterCurrent = value.slice(index + 1).map(function (v, i) {\n              return new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[i + index + 1]);\n            });\n            return [beforeCurrent.concat(v).concat(afterCurrent), undefined, index];\n          });\n        }));\n      };\n\n      for (var index = safeContext.startIndex; index < endIndex; ++index) {\n        _loop(index);\n      }\n\n      return shrinks;\n    }\n  }, {\n    key: \"shrinkImpl\",\n    value: function shrinkImpl(value, context) {\n      var _this3 = this;\n\n      if (value.length === 0) {\n        return Stream.nil();\n      }\n\n      var safeContext = context !== undefined ? context : {\n        shrunkOnce: false,\n        lengthContext: undefined,\n        itemsContexts: [],\n        startIndex: 0\n      };\n      return this.lengthArb.shrink(value.length, safeContext.lengthContext).drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0).map(function (lengthValue) {\n        var sliceStart = value.length - lengthValue.value;\n        return [value.slice(sliceStart).map(function (v, index) {\n          return new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart]);\n        }), lengthValue.context, 0];\n      }).join(makeLazy(function () {\n        return value.length > _this3.minLength ? _this3.shrinkItemByItem(value, safeContext, 1) : _this3.shrinkItemByItem(value, safeContext, value.length);\n      })).join(value.length > this.minLength ? makeLazy(function () {\n        var subContext = {\n          shrunkOnce: false,\n          lengthContext: undefined,\n          itemsContexts: safeContext.itemsContexts.slice(1),\n          startIndex: 0\n        };\n        return _this3.shrinkImpl(value.slice(1), subContext).filter(function (v) {\n          return _this3.minLength <= v[0].length + 1;\n        }).map(function (v) {\n          return [[new NextValue(cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]), undefined, 0];\n        });\n      }) : Stream.nil());\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value, context) {\n      var _this4 = this;\n\n      return this.shrinkImpl(value, context).map(function (contextualValue) {\n        return _this4.wrapper(contextualValue[0], true, contextualValue[1], contextualValue[2]);\n      });\n    }\n  }], [{\n    key: \"makeItCloneable\",\n    value: function makeItCloneable(vs, shrinkables) {\n      var _this5 = this;\n\n      vs[cloneMethod] = function () {\n        var cloned = [];\n\n        for (var idx = 0; idx !== shrinkables.length; ++idx) {\n          cloned.push(shrinkables[idx].value);\n        }\n\n        _this5.makeItCloneable(cloned, shrinkables);\n\n        return cloned;\n      };\n\n      return vs;\n    }\n  }]);\n\n  return ArrayArbitrary;\n}(NextArbitrary);","map":null,"metadata":{},"sourceType":"module"}