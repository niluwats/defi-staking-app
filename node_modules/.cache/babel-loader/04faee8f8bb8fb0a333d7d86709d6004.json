{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar timeoutAfter = function timeoutAfter(timeMs) {\n  var timeoutHandle = null;\n  var promise = new Promise(function (resolve) {\n    timeoutHandle = setTimeout(function () {\n      resolve(\"Property timeout: exceeded limit of \".concat(timeMs, \" milliseconds\"));\n    }, timeMs);\n  });\n  return {\n    clear: function clear() {\n      return clearTimeout(timeoutHandle);\n    },\n    promise: promise\n  };\n};\n\nexport var TimeoutProperty = /*#__PURE__*/function () {\n  function TimeoutProperty(property, timeMs) {\n    _classCallCheck(this, TimeoutProperty);\n\n    this.property = property;\n    this.timeMs = timeMs;\n  }\n\n  _createClass(TimeoutProperty, [{\n    key: \"isAsync\",\n    value: function isAsync() {\n      return true;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(mrng, runId) {\n      return this.property.generate(mrng, runId);\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value) {\n      return this.property.shrink(value);\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(v) {\n        var t, propRun;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                t = timeoutAfter(this.timeMs);\n                propRun = Promise.race([this.property.run(v), t.promise]);\n                propRun.then(t.clear, t.clear);\n                return _context.abrupt(\"return\", propRun);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function run(_x) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return TimeoutProperty;\n}();","map":null,"metadata":{},"sourceType":"module"}