{"ast":null,"code":"import _toConsumableArray from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { array } from '../../array.js';\nexport function typedIntArrayArbitraryArbitraryBuilder(constraints, defaultMin, defaultMax, TypedArrayClass, arbitraryBuilder) {\n  var generatorName = TypedArrayClass.name;\n\n  var _constraints$min = constraints.min,\n      min = _constraints$min === void 0 ? defaultMin : _constraints$min,\n      _constraints$max = constraints.max,\n      max = _constraints$max === void 0 ? defaultMax : _constraints$max,\n      arrayConstraints = __rest(constraints, [\"min\", \"max\"]);\n\n  if (min > max) {\n    throw new Error(\"Invalid range passed to \".concat(generatorName, \": min must be lower than or equal to max\"));\n  }\n\n  if (min < defaultMin) {\n    throw new Error(\"Invalid min value passed to \".concat(generatorName, \": min must be greater than or equal to \").concat(defaultMin));\n  }\n\n  if (max > defaultMax) {\n    throw new Error(\"Invalid max value passed to \".concat(generatorName, \": max must be lower than or equal to \").concat(defaultMax));\n  }\n\n  return convertFromNext(convertToNext(array(arbitraryBuilder({\n    min: min,\n    max: max\n  }), arrayConstraints)).map(function (data) {\n    return TypedArrayClass.from(data);\n  }, function (value) {\n    if (!(value instanceof TypedArrayClass)) throw new Error('Invalid type');\n    return _toConsumableArray(value);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}