{"ast":null,"code":"var _classCallCheck = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar TruffleError = require(\"@truffle/error\");\n\nvar utils = require(\"./utils\");\n\nvar defaultGas = 90000;\n\nvar StatusError = /*#__PURE__*/function (_TruffleError) {\n  \"use strict\";\n\n  _inherits(StatusError, _TruffleError);\n\n  function StatusError(args, tx, receipt, reason) {\n    var _this;\n\n    _classCallCheck(this, StatusError);\n\n    var message;\n    var gasLimit = args.gas || defaultGas;\n    var reasonString = \"\";\n    if (reason) reasonString = \"Reason given: \".concat(reason, \".\");\n\n    if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n      message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" + \"     - has enough gas to execute the full transaction.\\n\" + \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n    } else {\n      message = \"Transaction: \".concat(tx, \" exited with an error (status 0). \").concat(reasonString, \"\\n\") + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `require` statements.\\n\" + \"     - does not trigger a Solidity `revert` statement.\\n\";\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatusError).call(this, message));\n    _this.tx = tx;\n    _this.receipt = receipt;\n    _this.reason = reason;\n    return _this;\n  }\n\n  return StatusError;\n}(TruffleError);\n\nmodule.exports = StatusError;","map":null,"metadata":{},"sourceType":"script"}