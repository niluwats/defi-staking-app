{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport contract from \"@truffle/contract\";\nimport detectEthereumProvider from \"@metamask/detect-provider\"; // export const laodContract = async (name, provider) => {\n//   console.log(\"reached\");\n//   const res = await fetch(`/${name}.json`);\n//   console.log(\"reached\");\n//   console.log(res);\n//   const Artifact = await res.json();\n//   const cont = contract(Artifact);\n//   cont.setProvider(provider);\n//   const deployedCon = await cont.deployed();\n//   console.log(\"reached\");\n//   await deployedCon.issueTokens();\n// return deployedCon;\n// };\n// export default laodContract;\n// var contractj = require(\"../truffle_abis/DecentralBank.json\");\n// function issueRewards(callback) {\n//   // let decentralBank =  contractj.deployed();\n//   // await decentralBank.issueTokens();\n//   contractj[\"DecentralBank\"].deployed().then((value) => {\n//     value.issueTokens();\n//     console.log(\"Tokens have been issued successfully\");\n//     callback();\n//   });\n// }\n// export default issueRewards;\n// const DecentralBank = require(\"../truffle_abis/DecentralBank.json\");\n\nexport var issueRewards = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(callback) {\n    var provider, res, artifact, cont, deployedCon;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return detectEthereumProvider();\n\n          case 2:\n            provider = _context.sent;\n            _context.next = 5;\n            return fetch(\"/DecentralBank.json\");\n\n          case 5:\n            res = _context.sent;\n            _context.next = 8;\n            return res.json();\n\n          case 8:\n            artifact = _context.sent;\n            cont = contract(artifact);\n            cont.setProvider(provider);\n            _context.next = 13;\n            return cont.deployed();\n\n          case 13:\n            deployedCon = _context.sent;\n            console.log(\"reached\");\n            _context.next = 17;\n            return deployedCon.issueTokens({\n              from: deployedCon.owner\n            });\n\n          case 17:\n            console.log(\"Tokens have been issued successfully\");\n            callback();\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function issueRewards(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default issueRewards();","map":{"version":3,"sources":["D:/truff/defi-staking-app-starter/defi-staking-app-starter/src/scripts/issue-tokens.js"],"names":["contract","detectEthereumProvider","issueRewards","callback","provider","fetch","res","json","artifact","cont","setProvider","deployed","deployedCon","console","log","issueTokens","from","owner"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,IAAMC,YAAY;AAAA,sEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHF,sBAAsB,EADnB;;AAAA;AACpBG,YAAAA,QADoB;AAAA;AAAA,mBAGRC,KAAK,uBAHG;;AAAA;AAGpBC,YAAAA,GAHoB;AAAA;AAAA,mBAIHA,GAAG,CAACC,IAAJ,EAJG;;AAAA;AAIpBC,YAAAA,QAJoB;AAKpBC,YAAAA,IALoB,GAKbT,QAAQ,CAACQ,QAAD,CALK;AAM1BC,YAAAA,IAAI,CAACC,WAAL,CAAiBN,QAAjB;AAN0B;AAAA,mBAOAK,IAAI,CAACE,QAAL,EAPA;;AAAA;AAOpBC,YAAAA,WAPoB;AAQ1BC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAR0B;AAAA,mBASpBF,WAAW,CAACG,WAAZ,CAAwB;AAAEC,cAAAA,IAAI,EAAEJ,WAAW,CAACK;AAApB,aAAxB,CAToB;;AAAA;AAU1BJ,YAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAX,YAAAA,QAAQ;;AAXkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZD,YAAY;AAAA;AAAA;AAAA,GAAlB;AAcP,eAAeA,YAAY,EAA3B","sourcesContent":["import contract from \"@truffle/contract\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\n\r\n// export const laodContract = async (name, provider) => {\r\n//   console.log(\"reached\");\r\n//   const res = await fetch(`/${name}.json`);\r\n//   console.log(\"reached\");\r\n//   console.log(res);\r\n//   const Artifact = await res.json();\r\n//   const cont = contract(Artifact);\r\n//   cont.setProvider(provider);\r\n//   const deployedCon = await cont.deployed();\r\n//   console.log(\"reached\");\r\n//   await deployedCon.issueTokens();\r\n// return deployedCon;\r\n// };\r\n\r\n// export default laodContract;\r\n\r\n// var contractj = require(\"../truffle_abis/DecentralBank.json\");\r\n\r\n// function issueRewards(callback) {\r\n//   // let decentralBank =  contractj.deployed();\r\n//   // await decentralBank.issueTokens();\r\n//   contractj[\"DecentralBank\"].deployed().then((value) => {\r\n//     value.issueTokens();\r\n//     console.log(\"Tokens have been issued successfully\");\r\n//     callback();\r\n//   });\r\n// }\r\n// export default issueRewards;\r\n\r\n// const DecentralBank = require(\"../truffle_abis/DecentralBank.json\");\r\n\r\nexport const issueRewards = async (callback) => {\r\n  const provider = await detectEthereumProvider();\r\n\r\n  const res = await fetch(`/DecentralBank.json`);\r\n  const artifact = await res.json();\r\n  const cont = contract(artifact);\r\n  cont.setProvider(provider);\r\n  const deployedCon = await cont.deployed();\r\n  console.log(\"reached\");\r\n  await deployedCon.issueTokens({ from: deployedCon.owner });\r\n  console.log(\"Tokens have been issued successfully\");\r\n  callback();\r\n};\r\n\r\nexport default issueRewards();\r\n"]},"metadata":{},"sourceType":"module"}