{"ast":null,"code":"import _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { isSubarrayOf } from './helpers/IsSubarrayOf.js';\nimport { IntegerArbitrary } from './IntegerArbitrary.js';\nexport var SubarrayArbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(SubarrayArbitrary, _NextArbitrary);\n\n  function SubarrayArbitrary(originalArray, isOrdered, minLength, maxLength) {\n    var _this;\n\n    _classCallCheck(this, SubarrayArbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SubarrayArbitrary).call(this));\n    _this.originalArray = originalArray;\n    _this.isOrdered = isOrdered;\n    _this.minLength = minLength;\n    _this.maxLength = maxLength;\n    if (minLength < 0 || minLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n    if (maxLength < 0 || maxLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n    if (minLength > maxLength) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n    _this.lengthArb = new IntegerArbitrary(minLength, maxLength);\n    _this.biasedLengthArb = minLength !== maxLength ? new IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2))) : _this.lengthArb;\n    return _this;\n  }\n\n  _createClass(SubarrayArbitrary, [{\n    key: \"generate\",\n    value: function generate(mrng, biasFactor) {\n      var _this2 = this;\n\n      var lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n      var size = lengthArb.generate(mrng, undefined);\n      var sizeValue = size.value;\n      var remainingElements = this.originalArray.map(function (_v, idx) {\n        return idx;\n      });\n      var ids = [];\n\n      for (var index = 0; index !== sizeValue; ++index) {\n        var selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n        ids.push(remainingElements[selectedIdIndex]);\n        remainingElements.splice(selectedIdIndex, 1);\n      }\n\n      if (this.isOrdered) {\n        ids.sort(function (a, b) {\n          return a - b;\n        });\n      }\n\n      return new NextValue(ids.map(function (i) {\n        return _this2.originalArray[i];\n      }), size.context);\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      if (!Array.isArray(value)) {\n        return false;\n      }\n\n      if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n        return false;\n      }\n\n      return isSubarrayOf(this.originalArray, value);\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value, context) {\n      var _this3 = this;\n\n      if (value.length === 0) {\n        return Stream.nil();\n      }\n\n      return this.lengthArb.shrink(value.length, context).map(function (newSize) {\n        return new NextValue(value.slice(value.length - newSize.value), newSize.context);\n      }).join(value.length > this.minLength ? makeLazy(function () {\n        return _this3.shrink(value.slice(1), undefined).filter(function (newValue) {\n          return _this3.minLength <= newValue.value.length + 1;\n        }).map(function (newValue) {\n          return new NextValue([value[0]].concat(newValue.value), undefined);\n        });\n      }) : Stream.nil());\n    }\n  }]);\n\n  return SubarrayArbitrary;\n}(NextArbitrary);","map":null,"metadata":{},"sourceType":"module"}