{"ast":null,"code":"import _slicedToArray from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nexport var ReplayPath = /*#__PURE__*/function () {\n  function ReplayPath() {\n    _classCallCheck(this, ReplayPath);\n  }\n\n  _createClass(ReplayPath, null, [{\n    key: \"parse\",\n    value: function parse(replayPathStr) {\n      var _replayPathStr$split = replayPathStr.split(':'),\n          _replayPathStr$split2 = _slicedToArray(_replayPathStr$split, 2),\n          serializedCount = _replayPathStr$split2[0],\n          serializedChanges = _replayPathStr$split2[1];\n\n      var counts = this.parseCounts(serializedCount);\n      var changes = this.parseChanges(serializedChanges);\n      return this.parseOccurences(counts, changes);\n    }\n  }, {\n    key: \"stringify\",\n    value: function stringify(replayPath) {\n      var occurences = this.countOccurences(replayPath);\n      var serializedCount = this.stringifyCounts(occurences);\n      var serializedChanges = this.stringifyChanges(occurences);\n      return \"\".concat(serializedCount, \":\").concat(serializedChanges);\n    }\n  }, {\n    key: \"intToB64\",\n    value: function intToB64(n) {\n      if (n < 26) return String.fromCharCode(n + 65);\n      if (n < 52) return String.fromCharCode(n + 97 - 26);\n      if (n < 62) return String.fromCharCode(n + 48 - 52);\n      return String.fromCharCode(n === 62 ? 43 : 47);\n    }\n  }, {\n    key: \"b64ToInt\",\n    value: function b64ToInt(c) {\n      if (c >= 'a') return c.charCodeAt(0) - 97 + 26;\n      if (c >= 'A') return c.charCodeAt(0) - 65;\n      if (c >= '0') return c.charCodeAt(0) - 48 + 52;\n      return c === '+' ? 62 : 63;\n    }\n  }, {\n    key: \"countOccurences\",\n    value: function countOccurences(replayPath) {\n      return replayPath.reduce(function (counts, cur) {\n        if (counts.length === 0 || counts[counts.length - 1].count === 64 || counts[counts.length - 1].value !== cur) counts.push({\n          value: cur,\n          count: 1\n        });else counts[counts.length - 1].count += 1;\n        return counts;\n      }, []);\n    }\n  }, {\n    key: \"parseOccurences\",\n    value: function parseOccurences(counts, changes) {\n      var replayPath = [];\n\n      for (var idx = 0; idx !== counts.length; ++idx) {\n        var count = counts[idx];\n        var value = changes[idx];\n\n        for (var num = 0; num !== count; ++num) {\n          replayPath.push(value);\n        }\n      }\n\n      return replayPath;\n    }\n  }, {\n    key: \"stringifyChanges\",\n    value: function stringifyChanges(occurences) {\n      var serializedChanges = '';\n\n      for (var idx = 0; idx < occurences.length; idx += 6) {\n        var changesInt = occurences.slice(idx, idx + 6).reduceRight(function (prev, cur) {\n          return prev * 2 + (cur.value ? 1 : 0);\n        }, 0);\n        serializedChanges += this.intToB64(changesInt);\n      }\n\n      return serializedChanges;\n    }\n  }, {\n    key: \"parseChanges\",\n    value: function parseChanges(serializedChanges) {\n      var _this = this;\n\n      var changesInt = serializedChanges.split('').map(function (c) {\n        return _this.b64ToInt(c);\n      });\n      var changes = [];\n\n      for (var idx = 0; idx !== changesInt.length; ++idx) {\n        var current = changesInt[idx];\n\n        for (var n = 0; n !== 6; ++n, current >>= 1) {\n          changes.push(current % 2 === 1);\n        }\n      }\n\n      return changes;\n    }\n  }, {\n    key: \"stringifyCounts\",\n    value: function stringifyCounts(occurences) {\n      var _this2 = this;\n\n      return occurences.map(function (_ref) {\n        var count = _ref.count;\n        return _this2.intToB64(count - 1);\n      }).join('');\n    }\n  }, {\n    key: \"parseCounts\",\n    value: function parseCounts(serializedCount) {\n      var _this3 = this;\n\n      return serializedCount.split('').map(function (c) {\n        return _this3.b64ToInt(c) + 1;\n      });\n    }\n  }]);\n\n  return ReplayPath;\n}();","map":null,"metadata":{},"sourceType":"module"}