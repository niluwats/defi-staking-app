{"ast":null,"code":"import _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nvar _a;\n\nimport { ArbitraryWithContextualShrink } from './ArbitraryWithContextualShrink.js';\nimport { ConverterToNext } from './ConverterToNext.js';\nimport { Shrinkable } from './Shrinkable.js';\nvar identifier = '__ConverterFromNext__';\n\nfunction fromNextValueToShrinkableFor(arb) {\n  return function fromNextValueToShrinkable(v) {\n    var value_ = v.value_;\n\n    var shrinker = function shrinker() {\n      return arb.shrink(value_, v.context).map(fromNextValueToShrinkable);\n    };\n\n    if (!v.hasToBeCloned) {\n      return new Shrinkable(value_, shrinker);\n    }\n\n    return new Shrinkable(value_, shrinker, function () {\n      return v.value;\n    });\n  };\n}\n\nexport var ConverterFromNext = /*#__PURE__*/function (_ArbitraryWithContext) {\n  _inherits(ConverterFromNext, _ArbitraryWithContext);\n\n  function ConverterFromNext(arb, legacyShrunkOnceContext) {\n    var _this;\n\n    var biasFactor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n    _classCallCheck(this, ConverterFromNext);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConverterFromNext).call(this));\n    _this.arb = arb;\n    _this.legacyShrunkOnceContext = legacyShrunkOnceContext;\n    _this.biasFactor = biasFactor;\n    _this[_a] = true;\n    _this.toShrinkable = fromNextValueToShrinkableFor(arb);\n    return _this;\n  }\n\n  _createClass(ConverterFromNext, [{\n    key: \"generate\",\n    value: function generate(mrng) {\n      var g = this.arb.generate(mrng, this.biasFactor);\n      return this.toShrinkable(g);\n    }\n  }, {\n    key: \"contextualShrink\",\n    value: function contextualShrink(value, context) {\n      return this.arb.shrink(value, context).map(function (v) {\n        return [v.value_, v.context];\n      });\n    }\n  }, {\n    key: \"shrunkOnceContext\",\n    value: function shrunkOnceContext() {\n      return this.legacyShrunkOnceContext;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(refinement) {\n      return ConverterFromNext.convertIfNeeded(this.arb.filter(refinement));\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapper) {\n      return ConverterFromNext.convertIfNeeded(this.arb.map(mapper));\n    }\n  }, {\n    key: \"chain\",\n    value: function chain(fmapper) {\n      return ConverterFromNext.convertIfNeeded(this.arb.chain(function (t) {\n        var fmapped = fmapper(t);\n        if (ConverterFromNext.isConverterFromNext(fmapped)) return fmapped.arb;else return new ConverterToNext(fmapped);\n      }));\n    }\n  }, {\n    key: \"noShrink\",\n    value: function noShrink() {\n      return ConverterFromNext.convertIfNeeded(this.arb.noShrink());\n    }\n  }, {\n    key: \"withBias\",\n    value: function withBias(freq) {\n      return new ConverterFromNext(this.arb, this.legacyShrunkOnceContext, freq);\n    }\n  }, {\n    key: \"noBias\",\n    value: function noBias() {\n      return ConverterFromNext.convertIfNeeded(this.arb.noBias());\n    }\n  }], [{\n    key: \"isConverterFromNext\",\n    value: function isConverterFromNext(arb) {\n      return identifier in arb;\n    }\n  }, {\n    key: \"convertIfNeeded\",\n    value: function convertIfNeeded(arb) {\n      if (ConverterToNext.isConverterToNext(arb)) return arb.arb;else return new ConverterFromNext(arb);\n    }\n  }]);\n\n  return ConverterFromNext;\n}(ArbitraryWithContextualShrink);\n_a = identifier;","map":null,"metadata":{},"sourceType":"module"}