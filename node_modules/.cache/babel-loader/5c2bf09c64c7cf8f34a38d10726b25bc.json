{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function wordsToJoinedStringMapper(words) {\n  return words.map(function (w) {\n    return w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w;\n  }).join(' ');\n}\nexport function wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n  return function wordsToJoinedStringUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n\n    var words = [];\n\n    var _iterator = _createForOfIteratorHelper(value.split(' ')),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var candidate = _step.value;\n        if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return words;\n  };\n}\nexport function wordsToSentenceMapper(words) {\n  var sentence = words.join(' ');\n\n  if (sentence[sentence.length - 1] === ',') {\n    sentence = sentence.substr(0, sentence.length - 1);\n  }\n\n  return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexport function wordsToSentenceUnmapperFor(wordsArbitrary) {\n  return function wordsToSentenceUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n\n    if (value.length < 2 || value[value.length - 1] !== '.' || value[value.length - 2] === ',' || value[0].toLowerCase().toUpperCase() !== value[0]) {\n      throw new Error('Unsupported value');\n    }\n\n    var adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n    var words = [];\n    var candidates = adaptedValue.split(' ');\n\n    for (var idx = 0; idx !== candidates.length; ++idx) {\n      var candidate = candidates[idx];\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n\n    return words;\n  };\n}\nexport function sentencesToParagraphMapper(sentences) {\n  return sentences.join(' ');\n}\nexport function sentencesToParagraphUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  var sentences = value.split('. ');\n\n  for (var idx = 0; idx < sentences.length - 1; ++idx) {\n    sentences[idx] += '.';\n  }\n\n  return sentences;\n}","map":null,"metadata":{},"sourceType":"module"}