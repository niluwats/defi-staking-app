{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport { NextValue } from '../../../check/arbitrary/definition/NextValue.js';\nimport { stream } from '../../../stream/Stream.js';\n\nfunction halvePosInteger(n) {\n  return Math.floor(n / 2);\n}\n\nfunction halveNegInteger(n) {\n  return Math.ceil(n / 2);\n}\n\nexport function shrinkInteger(current, target, tryTargetAsap) {\n  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(shrinkDecr),\n      _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(shrinkIncr);\n\n  var realGap = current - target;\n\n  function shrinkDecr() {\n    var previous, gap, toremove, next;\n    return _regeneratorRuntime.wrap(function shrinkDecr$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            previous = tryTargetAsap ? undefined : target;\n            gap = tryTargetAsap ? realGap : halvePosInteger(realGap);\n            toremove = gap;\n\n          case 3:\n            if (!(toremove > 0)) {\n              _context.next = 11;\n              break;\n            }\n\n            next = toremove === realGap ? target : current - toremove;\n            _context.next = 7;\n            return new NextValue(next, previous);\n\n          case 7:\n            previous = next;\n\n          case 8:\n            toremove = halvePosInteger(toremove);\n            _context.next = 3;\n            break;\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _marked);\n  }\n\n  function shrinkIncr() {\n    var previous, gap, toremove, next;\n    return _regeneratorRuntime.wrap(function shrinkIncr$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            previous = tryTargetAsap ? undefined : target;\n            gap = tryTargetAsap ? realGap : halveNegInteger(realGap);\n            toremove = gap;\n\n          case 3:\n            if (!(toremove < 0)) {\n              _context2.next = 11;\n              break;\n            }\n\n            next = toremove === realGap ? target : current - toremove;\n            _context2.next = 7;\n            return new NextValue(next, previous);\n\n          case 7:\n            previous = next;\n\n          case 8:\n            toremove = halveNegInteger(toremove);\n            _context2.next = 3;\n            break;\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _marked2);\n  }\n\n  return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}","map":null,"metadata":{},"sourceType":"module"}