{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoProjectInfoError = exports.handleDecodingError = exports.StopDecodingError = exports.DecodingError = void 0;\n\nvar Format = __importStar(require(\"./format\")); //For when we need to throw an error, here's a wrapper class that extends Error.\n//Apologies about the confusing name, but I wanted something that would make\n//sense should it not be caught and thus accidentally exposed to the outside.\n\n/**\n * @hidden\n */\n\n\nvar DecodingError = /*#__PURE__*/function (_Error) {\n  _inherits(DecodingError, _Error);\n\n  function DecodingError(error) {\n    var _this;\n\n    _classCallCheck(this, DecodingError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DecodingError).call(this, Format.Utils.Exception.message(error)));\n    _this.error = error;\n    _this.name = \"DecodingError\";\n    return _this;\n  }\n\n  return DecodingError;\n}(_wrapNativeSuper(Error));\n\nexports.DecodingError = DecodingError; //used to stop decoding; like DecodingError, but used in contexts\n//where I don't expect it to be caught\n//NOTE: currently we don't actually check the type of a thrown error,\n//we just rely on context.  still, I think it makes sense to be a separate\n//type.\n\n/**\n * @hidden\n */\n\nvar StopDecodingError = /*#__PURE__*/function (_Error2) {\n  _inherits(StopDecodingError, _Error2);\n\n  //when decoding in full mode, we allow an ABI-mode retry.  (if we were already in\n  //ABI mode, we give up.)\n  function StopDecodingError(error, allowRetry) {\n    var _this2;\n\n    _classCallCheck(this, StopDecodingError);\n\n    var message = \"Stopping decoding: \".concat(error.kind); //sorry about the bare-bones message,\n    //but again, users shouldn't actually see this, so I think this should suffice for now\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(StopDecodingError).call(this, message));\n    _this2.error = error;\n    _this2.allowRetry = Boolean(allowRetry);\n    return _this2;\n  }\n\n  return StopDecodingError;\n}(_wrapNativeSuper(Error));\n\nexports.StopDecodingError = StopDecodingError;\n/**\n * @hidden\n */\n\nfunction handleDecodingError(dataType, error) {\n  var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (error instanceof DecodingError) {\n    //expected error\n    if (strict) {\n      //strict mode -- stop decoding on errors\n      throw new StopDecodingError(error.error);\n    } else {\n      //nonstrict mode -- return an error result\n      return {\n        //I don't know why TS's inference is failing here and needs the coercion\n        type: dataType,\n        kind: \"error\",\n        error: error.error\n      };\n    }\n  } else {\n    //if it's *not* an expected error, we better not swallow it -- rethrow!\n    throw error;\n  }\n}\n\nexports.handleDecodingError = handleDecodingError;\n/**\n * This error indicates that the user attempted to instantiate a decoder\n * with no project information (by explicitly overriding the default).\n * @category Exception\n */\n\nvar NoProjectInfoError = /*#__PURE__*/function (_Error3) {\n  _inherits(NoProjectInfoError, _Error3);\n\n  function NoProjectInfoError() {\n    var _this3;\n\n    _classCallCheck(this, NoProjectInfoError);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(NoProjectInfoError).call(this, \"No project information specified.\"));\n    _this3.name = \"NoProjectInfoError\";\n    return _this3;\n  }\n\n  return NoProjectInfoError;\n}(_wrapNativeSuper(Error));\n\nexports.NoProjectInfoError = NoProjectInfoError;","map":null,"metadata":{},"sourceType":"script"}