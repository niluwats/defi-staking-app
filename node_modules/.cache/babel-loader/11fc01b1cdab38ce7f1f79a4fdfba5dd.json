{"ast":null,"code":"import _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nexport var LazyArbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(LazyArbitrary, _NextArbitrary);\n\n  function LazyArbitrary(name) {\n    var _this;\n\n    _classCallCheck(this, LazyArbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LazyArbitrary).call(this));\n    _this.name = name;\n    _this.underlying = null;\n    return _this;\n  }\n\n  _createClass(LazyArbitrary, [{\n    key: \"generate\",\n    value: function generate(mrng, biasFactor) {\n      if (!this.underlying) {\n        throw new Error(\"Lazy arbitrary \".concat(JSON.stringify(this.name), \" not correctly initialized\"));\n      }\n\n      return this.underlying.generate(mrng, biasFactor);\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      if (!this.underlying) {\n        throw new Error(\"Lazy arbitrary \".concat(JSON.stringify(this.name), \" not correctly initialized\"));\n      }\n\n      return this.underlying.canShrinkWithoutContext(value);\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value, context) {\n      if (!this.underlying) {\n        throw new Error(\"Lazy arbitrary \".concat(JSON.stringify(this.name), \" not correctly initialized\"));\n      }\n\n      return this.underlying.shrink(value, context);\n    }\n  }]);\n\n  return LazyArbitrary;\n}(NextArbitrary);","map":null,"metadata":{},"sourceType":"module"}