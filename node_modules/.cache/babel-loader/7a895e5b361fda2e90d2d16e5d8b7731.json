{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { PreconditionFailure } from '../precondition/PreconditionFailure.js';\nimport { runIdToFrequency } from './IRawProperty.js';\nimport { readConfigureGlobal } from '../runner/configuration/GlobalParameters.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { convertToNext } from '../arbitrary/definition/Converters.js';\nimport { noUndefinedAsContext, UndefinedContextPlaceholder } from '../../arbitrary/_internals/helpers/NoUndefinedAsContext.js';\nexport var AsyncProperty = /*#__PURE__*/function () {\n  function AsyncProperty(rawArb, predicate) {\n    _classCallCheck(this, AsyncProperty);\n\n    this.predicate = predicate;\n\n    var _ref = readConfigureGlobal() || {},\n        asyncBeforeEach = _ref.asyncBeforeEach,\n        asyncAfterEach = _ref.asyncAfterEach,\n        beforeEach = _ref.beforeEach,\n        afterEach = _ref.afterEach;\n\n    if (asyncBeforeEach !== undefined && beforeEach !== undefined) {\n      throw Error('Global \"asyncBeforeEach\" and \"beforeEach\" parameters can\\'t be set at the same time when running async properties');\n    }\n\n    if (asyncAfterEach !== undefined && afterEach !== undefined) {\n      throw Error('Global \"asyncAfterEach\" and \"afterEach\" parameters can\\'t be set at the same time when running async properties');\n    }\n\n    this.beforeEachHook = asyncBeforeEach || beforeEach || AsyncProperty.dummyHook;\n    this.afterEachHook = asyncAfterEach || afterEach || AsyncProperty.dummyHook;\n    this.arb = convertToNext(rawArb);\n  }\n\n  _createClass(AsyncProperty, [{\n    key: \"isAsync\",\n    value: function isAsync() {\n      return true;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(mrng, runId) {\n      var value = this.arb.generate(mrng, runId != null ? runIdToFrequency(runId) : undefined);\n      return noUndefinedAsContext(value);\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value) {\n      if (value.context === undefined && !this.arb.canShrinkWithoutContext(value.value_)) {\n        return Stream.nil();\n      }\n\n      var safeContext = value.context !== UndefinedContextPlaceholder ? value.context : undefined;\n      return this.arb.shrink(value.value_, safeContext).map(noUndefinedAsContext);\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(v) {\n        var output;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.beforeEachHook();\n\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return this.predicate(v);\n\n              case 5:\n                output = _context.sent;\n                return _context.abrupt(\"return\", output == null || output === true ? null : 'Property failed by returning false');\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!PreconditionFailure.isFailure(_context.t0)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _context.t0);\n\n              case 13:\n                if (!(_context.t0 instanceof Error && _context.t0.stack)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", \"\".concat(_context.t0, \"\\n\\nStack trace: \").concat(_context.t0.stack));\n\n              case 15:\n                return _context.abrupt(\"return\", \"\".concat(_context.t0));\n\n              case 16:\n                _context.prev = 16;\n                _context.next = 19;\n                return this.afterEachHook();\n\n              case 19:\n                return _context.finish(16);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9, 16, 20]]);\n      }));\n\n      function run(_x) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: \"beforeEach\",\n    value: function beforeEach(hookFunction) {\n      var previousBeforeEachHook = this.beforeEachHook;\n\n      this.beforeEachHook = function () {\n        return hookFunction(previousBeforeEachHook);\n      };\n\n      return this;\n    }\n  }, {\n    key: \"afterEach\",\n    value: function afterEach(hookFunction) {\n      var previousAfterEachHook = this.afterEachHook;\n\n      this.afterEachHook = function () {\n        return hookFunction(previousAfterEachHook);\n      };\n\n      return this;\n    }\n  }]);\n\n  return AsyncProperty;\n}();\n\nAsyncProperty.dummyHook = function () {};","map":null,"metadata":{},"sourceType":"module"}