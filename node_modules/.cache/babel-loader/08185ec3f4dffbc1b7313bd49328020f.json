{"ast":null,"code":"import _toConsumableArray from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { CommandsIterable } from '../../check/model/commands/CommandsIterable.js';\nimport { CommandWrapper } from '../../check/model/commands/CommandWrapper.js';\nimport { ReplayPath } from '../../check/model/ReplayPath.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { oneof } from '../oneof.js';\nimport { IntegerArbitrary } from './IntegerArbitrary.js';\nexport var CommandsArbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(CommandsArbitrary, _NextArbitrary);\n\n  function CommandsArbitrary(commandArbs, maxCommands, sourceReplayPath, disableReplayLog) {\n    var _this;\n\n    _classCallCheck(this, CommandsArbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommandsArbitrary).call(this));\n    _this.sourceReplayPath = sourceReplayPath;\n    _this.disableReplayLog = disableReplayLog;\n    _this.oneCommandArb = convertToNext(oneof.apply(void 0, _toConsumableArray(commandArbs)).map(function (c) {\n      return new CommandWrapper(c);\n    }));\n    _this.lengthArb = new IntegerArbitrary(0, maxCommands);\n    _this.replayPath = [];\n    _this.replayPathPosition = 0;\n    return _this;\n  }\n\n  _createClass(CommandsArbitrary, [{\n    key: \"metadataForReplay\",\n    value: function metadataForReplay() {\n      return this.disableReplayLog ? '' : \"replayPath=\".concat(JSON.stringify(ReplayPath.stringify(this.replayPath)));\n    }\n  }, {\n    key: \"buildNextValueFor\",\n    value: function buildNextValueFor(items, shrunkOnce) {\n      var _this2 = this;\n\n      var commands = items.map(function (item) {\n        return item.value_;\n      });\n      var context = {\n        shrunkOnce: shrunkOnce,\n        items: items\n      };\n      return new NextValue(new CommandsIterable(commands, function () {\n        return _this2.metadataForReplay();\n      }), context);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(mrng) {\n      var size = this.lengthArb.generate(mrng, undefined);\n      var sizeValue = size.value;\n      var items = Array(sizeValue);\n\n      for (var idx = 0; idx !== sizeValue; ++idx) {\n        var item = this.oneCommandArb.generate(mrng, undefined);\n        items[idx] = item;\n      }\n\n      this.replayPathPosition = 0;\n      return this.buildNextValueFor(items, false);\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      return false;\n    }\n  }, {\n    key: \"filterOnExecution\",\n    value: function filterOnExecution(itemsRaw) {\n      var items = [];\n\n      var _iterator = _createForOfIteratorHelper(itemsRaw),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var c = _step.value;\n\n          if (c.value_.hasRan) {\n            this.replayPath.push(true);\n            items.push(c);\n          } else this.replayPath.push(false);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return items;\n    }\n  }, {\n    key: \"filterOnReplay\",\n    value: function filterOnReplay(itemsRaw) {\n      var _this3 = this;\n\n      return itemsRaw.filter(function (c, idx) {\n        var state = _this3.replayPath[_this3.replayPathPosition + idx];\n        if (state === undefined) throw new Error(\"Too short replayPath\");\n        if (!state && c.value_.hasRan) throw new Error(\"Mismatch between replayPath and real execution\");\n        return state;\n      });\n    }\n  }, {\n    key: \"filterForShrinkImpl\",\n    value: function filterForShrinkImpl(itemsRaw) {\n      if (this.replayPathPosition === 0) {\n        this.replayPath = this.sourceReplayPath !== null ? ReplayPath.parse(this.sourceReplayPath) : [];\n      }\n\n      var items = this.replayPathPosition < this.replayPath.length ? this.filterOnReplay(itemsRaw) : this.filterOnExecution(itemsRaw);\n      this.replayPathPosition += itemsRaw.length;\n      return items;\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(_value, context) {\n      var _this4 = this;\n\n      if (context === undefined) {\n        return Stream.nil();\n      }\n\n      var safeContext = context;\n      var shrunkOnce = safeContext.shrunkOnce;\n      var itemsRaw = safeContext.items;\n      var items = this.filterForShrinkImpl(itemsRaw);\n\n      if (items.length === 0) {\n        return Stream.nil();\n      }\n\n      var rootShrink = shrunkOnce ? Stream.nil() : new Stream([[]][Symbol.iterator]());\n      var nextShrinks = [];\n\n      var _loop = function _loop(numToKeep) {\n        nextShrinks.push(makeLazy(function () {\n          var fixedStart = items.slice(0, numToKeep);\n          return _this4.lengthArb.shrink(items.length - 1 - numToKeep, undefined).map(function (l) {\n            return fixedStart.concat(items.slice(items.length - (l.value + 1)));\n          });\n        }));\n      };\n\n      for (var numToKeep = 0; numToKeep !== items.length; ++numToKeep) {\n        _loop(numToKeep);\n      }\n\n      var _loop2 = function _loop2(itemAt) {\n        nextShrinks.push(makeLazy(function () {\n          return _this4.oneCommandArb.shrink(items[itemAt].value_, items[itemAt].context).map(function (v) {\n            return items.slice(0, itemAt).concat([v], items.slice(itemAt + 1));\n          });\n        }));\n      };\n\n      for (var itemAt = 0; itemAt !== items.length; ++itemAt) {\n        _loop2(itemAt);\n      }\n\n      return rootShrink.join.apply(rootShrink, nextShrinks).map(function (shrinkables) {\n        return _this4.buildNextValueFor(shrinkables.map(function (c) {\n          return new NextValue(c.value_.clone(), c.context);\n        }), true);\n      });\n    }\n  }]);\n\n  return CommandsArbitrary;\n}(NextArbitrary);","map":null,"metadata":{},"sourceType":"module"}