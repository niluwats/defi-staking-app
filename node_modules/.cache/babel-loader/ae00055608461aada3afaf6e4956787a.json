{"ast":null,"code":"import _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nexport var TupleArbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(TupleArbitrary, _NextArbitrary);\n\n  function TupleArbitrary(arbs) {\n    var _this;\n\n    _classCallCheck(this, TupleArbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TupleArbitrary).call(this));\n    _this.arbs = arbs;\n\n    for (var idx = 0; idx !== arbs.length; ++idx) {\n      var arb = arbs[idx];\n      if (arb == null || arb.generate == null) throw new Error(\"Invalid parameter encountered at index \".concat(idx, \": expecting an Arbitrary\"));\n    }\n\n    return _this;\n  }\n\n  _createClass(TupleArbitrary, [{\n    key: \"generate\",\n    value: function generate(mrng, biasFactor) {\n      return TupleArbitrary.wrapper(this.arbs.map(function (a) {\n        return a.generate(mrng, biasFactor);\n      }));\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      if (!Array.isArray(value) || value.length !== this.arbs.length) {\n        return false;\n      }\n\n      for (var index = 0; index !== this.arbs.length; ++index) {\n        if (!this.arbs[index].canShrinkWithoutContext(value[index])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(value, context) {\n      var _this2 = this;\n\n      var s = Stream.nil();\n      var safeContext = Array.isArray(context) ? context : [];\n\n      var _loop = function _loop(idx) {\n        var shrinksForIndex = _this2.arbs[idx].shrink(value[idx], safeContext[idx]).map(function (v) {\n          var nextValues = value.map(function (v, idx) {\n            return new NextValue(cloneIfNeeded(v), safeContext[idx]);\n          });\n          return nextValues.slice(0, idx).concat([v]).concat(nextValues.slice(idx + 1));\n        }).map(function (values) {\n          return TupleArbitrary.wrapper(values);\n        });\n\n        s = s.join(shrinksForIndex);\n      };\n\n      for (var idx = 0; idx !== this.arbs.length; ++idx) {\n        _loop(idx);\n      }\n\n      return s;\n    }\n  }], [{\n    key: \"makeItCloneable\",\n    value: function makeItCloneable(vs, values) {\n      return Object.defineProperty(vs, cloneMethod, {\n        value: function value() {\n          var cloned = [];\n\n          for (var idx = 0; idx !== values.length; ++idx) {\n            cloned.push(values[idx].value);\n          }\n\n          TupleArbitrary.makeItCloneable(cloned, values);\n          return cloned;\n        }\n      });\n    }\n  }, {\n    key: \"wrapper\",\n    value: function wrapper(values) {\n      var cloneable = false;\n      var vs = [];\n      var ctxs = [];\n\n      for (var idx = 0; idx !== values.length; ++idx) {\n        var v = values[idx];\n        cloneable = cloneable || v.hasToBeCloned;\n        vs.push(v.value);\n        ctxs.push(v.context);\n      }\n\n      if (cloneable) {\n        TupleArbitrary.makeItCloneable(vs, values);\n      }\n\n      return new NextValue(vs, ctxs);\n    }\n  }]);\n\n  return TupleArbitrary;\n}(NextArbitrary);","map":null,"metadata":{},"sourceType":"module"}