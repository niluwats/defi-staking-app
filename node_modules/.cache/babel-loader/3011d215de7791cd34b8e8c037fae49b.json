{"ast":null,"code":"import { fullUnicode } from '../../fullUnicode.js';\nimport { frequency } from '../../frequency.js';\nimport { mapToConstant } from '../../mapToConstant.js';\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nvar lowerCaseMapper = {\n  num: 26,\n  build: function build(v) {\n    return String.fromCharCode(v + 0x61);\n  }\n};\nvar upperCaseMapper = {\n  num: 26,\n  build: function build(v) {\n    return String.fromCharCode(v + 0x41);\n  }\n};\nvar numericMapper = {\n  num: 10,\n  build: function build(v) {\n    return String.fromCharCode(v + 0x30);\n  }\n};\n\nfunction percentCharArbMapper(c) {\n  var encoded = encodeURIComponent(c);\n  return c !== encoded ? encoded : \"%\".concat(c.charCodeAt(0).toString(16));\n}\n\nfunction percentCharArbUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  var decoded = decodeURIComponent(value);\n  return decoded;\n}\n\nvar percentCharArb = convertFromNext(convertToNext(fullUnicode()).map(percentCharArbMapper, percentCharArbUnmapper));\nexport var buildLowerAlphaArbitrary = function buildLowerAlphaArbitrary(others) {\n  return mapToConstant(lowerCaseMapper, {\n    num: others.length,\n    build: function build(v) {\n      return others[v];\n    }\n  });\n};\nexport var buildLowerAlphaNumericArbitrary = function buildLowerAlphaNumericArbitrary(others) {\n  return mapToConstant(lowerCaseMapper, numericMapper, {\n    num: others.length,\n    build: function build(v) {\n      return others[v];\n    }\n  });\n};\nexport var buildAlphaNumericArbitrary = function buildAlphaNumericArbitrary(others) {\n  return mapToConstant(lowerCaseMapper, upperCaseMapper, numericMapper, {\n    num: others.length,\n    build: function build(v) {\n      return others[v];\n    }\n  });\n};\nexport var buildAlphaNumericPercentArbitrary = function buildAlphaNumericPercentArbitrary(others) {\n  return frequency({\n    weight: 10,\n    arbitrary: buildAlphaNumericArbitrary(others)\n  }, {\n    weight: 1,\n    arbitrary: percentCharArb\n  });\n};","map":null,"metadata":{},"sourceType":"module"}