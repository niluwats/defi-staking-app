{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { stream, Stream } from '../../stream/Stream.js';\nimport { convertFromNextWithShrunkOnce } from '../../check/arbitrary/definition/Converters.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { add64, halve64, isEqual64, isStrictlyNegative64, isStrictlyPositive64, isStrictlySmaller64, isZero64, logLike64, substract64, Unit64, Zero64 } from './helpers/ArrayInt64.js';\n\nvar ArrayInt64Arbitrary = /*#__PURE__*/function (_NextArbitrary) {\n  _inherits(ArrayInt64Arbitrary, _NextArbitrary);\n\n  function ArrayInt64Arbitrary(min, max) {\n    var _this;\n\n    _classCallCheck(this, ArrayInt64Arbitrary);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayInt64Arbitrary).call(this));\n    _this.min = min;\n    _this.max = max;\n    _this.biasedRanges = null;\n    return _this;\n  }\n\n  _createClass(ArrayInt64Arbitrary, [{\n    key: \"generate\",\n    value: function generate(mrng, biasFactor) {\n      var range = this.computeGenerateRange(mrng, biasFactor);\n      var uncheckedValue = mrng.nextArrayInt(range.min, range.max);\n\n      if (uncheckedValue.data.length === 1) {\n        uncheckedValue.data.unshift(0);\n      }\n\n      return new NextValue(uncheckedValue, undefined);\n    }\n  }, {\n    key: \"computeGenerateRange\",\n    value: function computeGenerateRange(mrng, biasFactor) {\n      if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n        return {\n          min: this.min,\n          max: this.max\n        };\n      }\n\n      var ranges = this.retrieveBiasedRanges();\n\n      if (ranges.length === 1) {\n        return ranges[0];\n      }\n\n      var id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n      return id < 0 ? ranges[0] : ranges[id + 1];\n    }\n  }, {\n    key: \"canShrinkWithoutContext\",\n    value: function canShrinkWithoutContext(value) {\n      var unsafeValue = value;\n      return typeof value === 'object' && value !== null && (unsafeValue.sign === -1 || unsafeValue.sign === 1) && Array.isArray(unsafeValue.data) && unsafeValue.data.length === 2 && (isStrictlySmaller64(this.min, unsafeValue) && isStrictlySmaller64(unsafeValue, this.max) || isEqual64(this.min, unsafeValue) || isEqual64(this.max, unsafeValue));\n    }\n  }, {\n    key: \"shrinkArrayInt64\",\n    value: function shrinkArrayInt64(value, target, tryTargetAsap) {\n      var _marked = /*#__PURE__*/_regeneratorRuntime.mark(shrinkGen);\n\n      var realGap = substract64(value, target);\n\n      function shrinkGen() {\n        var previous, gap, toremove, next;\n        return _regeneratorRuntime.wrap(function shrinkGen$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                previous = tryTargetAsap ? undefined : target;\n                gap = tryTargetAsap ? realGap : halve64(realGap);\n                toremove = gap;\n\n              case 3:\n                if (isZero64(toremove)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                next = substract64(value, toremove);\n                _context.next = 7;\n                return new NextValue(next, previous);\n\n              case 7:\n                previous = next;\n\n              case 8:\n                toremove = halve64(toremove);\n                _context.next = 3;\n                break;\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _marked);\n      }\n\n      return stream(shrinkGen());\n    }\n  }, {\n    key: \"shrink\",\n    value: function shrink(current, context) {\n      if (!ArrayInt64Arbitrary.isValidContext(current, context)) {\n        var target = this.defaultTarget();\n        return this.shrinkArrayInt64(current, target, true);\n      }\n\n      if (this.isLastChanceTry(current, context)) {\n        return Stream.of(new NextValue(context, undefined));\n      }\n\n      return this.shrinkArrayInt64(current, context, false);\n    }\n  }, {\n    key: \"defaultTarget\",\n    value: function defaultTarget() {\n      if (!isStrictlyPositive64(this.min) && !isStrictlyNegative64(this.max)) {\n        return Zero64;\n      }\n\n      return isStrictlyNegative64(this.min) ? this.max : this.min;\n    }\n  }, {\n    key: \"isLastChanceTry\",\n    value: function isLastChanceTry(current, context) {\n      if (isZero64(current)) {\n        return false;\n      }\n\n      if (current.sign === 1) {\n        return isEqual64(current, add64(context, Unit64)) && isStrictlyPositive64(substract64(current, this.min));\n      } else {\n        return isEqual64(current, substract64(context, Unit64)) && isStrictlyNegative64(substract64(current, this.max));\n      }\n    }\n  }, {\n    key: \"retrieveBiasedRanges\",\n    value: function retrieveBiasedRanges() {\n      if (this.biasedRanges != null) {\n        return this.biasedRanges;\n      }\n\n      if (isEqual64(this.min, this.max)) {\n        this.biasedRanges = [{\n          min: this.min,\n          max: this.max\n        }];\n        return this.biasedRanges;\n      }\n\n      var minStrictlySmallerZero = isStrictlyNegative64(this.min);\n      var maxStrictlyGreaterZero = isStrictlyPositive64(this.max);\n\n      if (minStrictlySmallerZero && maxStrictlyGreaterZero) {\n        var logMin = logLike64(this.min);\n        var logMax = logLike64(this.max);\n        this.biasedRanges = [{\n          min: logMin,\n          max: logMax\n        }, {\n          min: substract64(this.max, logMax),\n          max: this.max\n        }, {\n          min: this.min,\n          max: substract64(this.min, logMin)\n        }];\n      } else {\n        var logGap = logLike64(substract64(this.max, this.min));\n        var arbCloseToMin = {\n          min: this.min,\n          max: add64(this.min, logGap)\n        };\n        var arbCloseToMax = {\n          min: substract64(this.max, logGap),\n          max: this.max\n        };\n        this.biasedRanges = minStrictlySmallerZero ? [arbCloseToMax, arbCloseToMin] : [arbCloseToMin, arbCloseToMax];\n      }\n\n      return this.biasedRanges;\n    }\n  }], [{\n    key: \"isValidContext\",\n    value: function isValidContext(_current, context) {\n      if (context === undefined) {\n        return false;\n      }\n\n      if (typeof context !== 'object' || context === null || !('sign' in context) || !('data' in context)) {\n        throw new Error(\"Invalid context type passed to ArrayInt64Arbitrary (#1)\");\n      }\n\n      return true;\n    }\n  }]);\n\n  return ArrayInt64Arbitrary;\n}(NextArbitrary);\n\nexport function arrayInt64(min, max) {\n  var arb = new ArrayInt64Arbitrary(min, max);\n  return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}","map":null,"metadata":{},"sourceType":"module"}