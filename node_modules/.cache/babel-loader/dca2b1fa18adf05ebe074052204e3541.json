{"ast":null,"code":"import _toConsumableArray from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { stream } from '../../stream/Stream.js';\nimport { convertToNextProperty } from '../property/ConvertersProperty.js';\nimport { Property } from '../property/Property.generic.js';\nimport { UnbiasedProperty } from '../property/UnbiasedProperty.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\n\nfunction toProperty(generator, qParams) {\n  var prop = !Object.prototype.hasOwnProperty.call(generator, 'isAsync') ? new Property(generator, function () {\n    return true;\n  }) : convertToNextProperty(generator);\n  return qParams.unbiased === true ? new UnbiasedProperty(prop) : prop;\n}\n\nfunction streamSample(generator, params) {\n  var extendedParams = typeof params === 'number' ? Object.assign(Object.assign({}, readConfigureGlobal()), {\n    numRuns: params\n  }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n  var qParams = QualifiedParameters.read(extendedParams);\n  var nextProperty = toProperty(generator, qParams);\n  var shrink = nextProperty.shrink.bind(nextProperty);\n  var tossedValues = stream(toss(nextProperty, qParams.seed, qParams.randomType, qParams.examples));\n\n  if (qParams.path.length === 0) {\n    return tossedValues.take(qParams.numRuns).map(function (s) {\n      return s().value_;\n    });\n  }\n\n  return stream(pathWalk(qParams.path, tossedValues.map(function (s) {\n    return s();\n  }), shrink)).take(qParams.numRuns).map(function (s) {\n    return s.value_;\n  });\n}\n\nfunction sample(generator, params) {\n  return _toConsumableArray(streamSample(generator, params));\n}\n\nfunction statistics(generator, classify, params) {\n  var extendedParams = typeof params === 'number' ? Object.assign(Object.assign({}, readConfigureGlobal()), {\n    numRuns: params\n  }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n  var qParams = QualifiedParameters.read(extendedParams);\n  var recorded = {};\n\n  var _iterator = _createForOfIteratorHelper(streamSample(generator, params)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var g = _step.value;\n      var out = classify(g);\n      var categories = Array.isArray(out) ? out : [out];\n\n      var _iterator3 = _createForOfIteratorHelper(categories),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var c = _step3.value;\n          recorded[c] = (recorded[c] || 0) + 1;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var data = Object.entries(recorded).sort(function (a, b) {\n    return b[1] - a[1];\n  }).map(function (i) {\n    return [i[0], \"\".concat((i[1] * 100.0 / qParams.numRuns).toFixed(2), \"%\")];\n  });\n  var longestName = data.map(function (i) {\n    return i[0].length;\n  }).reduce(function (p, c) {\n    return Math.max(p, c);\n  }, 0);\n  var longestPercent = data.map(function (i) {\n    return i[1].length;\n  }).reduce(function (p, c) {\n    return Math.max(p, c);\n  }, 0);\n\n  var _iterator2 = _createForOfIteratorHelper(data),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var item = _step2.value;\n      qParams.logger(\"\".concat(item[0].padEnd(longestName, '.'), \"..\").concat(item[1].padStart(longestPercent, '.')));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nexport { sample, statistics };","map":null,"metadata":{},"sourceType":"module"}