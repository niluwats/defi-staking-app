{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { scheduleCommands } from './commands/ScheduledCommand.js';\n\nvar genericModelRun = function genericModelRun(s, cmds, initialValue, runCmd, then) {\n  return s.then(function (o) {\n    var model = o.model,\n        real = o.real;\n    var state = initialValue;\n\n    var _iterator = _createForOfIteratorHelper(cmds),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var c = _step.value;\n        state = then(state, function () {\n          return runCmd(c, model, real);\n        });\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return state;\n  });\n};\n\nvar internalModelRun = function internalModelRun(s, cmds) {\n  var then = function then(_p, c) {\n    return c();\n  };\n\n  var setupProducer = {\n    then: function then(fun) {\n      fun(s());\n      return undefined;\n    }\n  };\n\n  var runSync = function runSync(cmd, m, r) {\n    if (cmd.check(m)) cmd.run(m, r);\n    return undefined;\n  };\n\n  return genericModelRun(setupProducer, cmds, undefined, runSync, then);\n};\n\nvar isAsyncSetup = function isAsyncSetup(s) {\n  return typeof s.then === 'function';\n};\n\nvar internalAsyncModelRun = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(s, cmds) {\n    var defaultPromise,\n        then,\n        setupProducer,\n        runAsync,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            defaultPromise = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : Promise.resolve();\n\n            then = function then(p, c) {\n              return p.then(c);\n            };\n\n            setupProducer = {\n              then: function then(fun) {\n                var out = s();\n                if (isAsyncSetup(out)) return out.then(fun);else return fun(out);\n              }\n            };\n\n            runAsync = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cmd, m, r) {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return cmd.check(m);\n\n                      case 2:\n                        if (!_context.sent) {\n                          _context.next = 5;\n                          break;\n                        }\n\n                        _context.next = 5;\n                        return cmd.run(m, r);\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function runAsync(_x3, _x4, _x5) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            _context2.next = 6;\n            return genericModelRun(setupProducer, cmds, defaultPromise, runAsync, then);\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function internalAsyncModelRun(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport function modelRun(s, cmds) {\n  internalModelRun(s, cmds);\n}\nexport function asyncModelRun(_x6, _x7) {\n  return _asyncModelRun.apply(this, arguments);\n}\n\nfunction _asyncModelRun() {\n  _asyncModelRun = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(s, cmds) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return internalAsyncModelRun(s, cmds);\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _asyncModelRun.apply(this, arguments);\n}\n\nexport function scheduledModelRun(_x8, _x9, _x10) {\n  return _scheduledModelRun.apply(this, arguments);\n}\n\nfunction _scheduledModelRun() {\n  _scheduledModelRun = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(scheduler, s, cmds) {\n    var scheduledCommands, out;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            scheduledCommands = scheduleCommands(scheduler, cmds);\n            out = internalAsyncModelRun(s, scheduledCommands, scheduler.schedule(Promise.resolve(), 'startModel'));\n            _context4.next = 4;\n            return scheduler.waitAll();\n\n          case 4:\n            _context4.next = 6;\n            return out;\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _scheduledModelRun.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}