{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport var ScheduledCommand = /*#__PURE__*/function () {\n  function ScheduledCommand(s, cmd) {\n    _classCallCheck(this, ScheduledCommand);\n\n    this.s = s;\n    this.cmd = cmd;\n  }\n\n  _createClass(ScheduledCommand, [{\n    key: \"check\",\n    value: function () {\n      var _check = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(m) {\n        var _this = this;\n\n        var error, checkPassed, status;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                error = null;\n                checkPassed = false;\n                _context2.next = 4;\n                return this.s.scheduleSequence([{\n                  label: \"check@\".concat(this.cmd.toString()),\n                  builder: function () {\n                    var _builder = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.prev = 0;\n                              _context.next = 3;\n                              return Promise.resolve(_this.cmd.check(m));\n\n                            case 3:\n                              checkPassed = _context.sent;\n                              _context.next = 10;\n                              break;\n\n                            case 6:\n                              _context.prev = 6;\n                              _context.t0 = _context[\"catch\"](0);\n                              error = _context.t0;\n                              throw _context.t0;\n\n                            case 10:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, null, [[0, 6]]);\n                    }));\n\n                    function builder() {\n                      return _builder.apply(this, arguments);\n                    }\n\n                    return builder;\n                  }()\n                }]).task;\n\n              case 4:\n                status = _context2.sent;\n\n                if (!status.faulty) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw error;\n\n              case 7:\n                return _context2.abrupt(\"return\", checkPassed);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function check(_x) {\n        return _check.apply(this, arguments);\n      }\n\n      return check;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(m, r) {\n        var _this2 = this;\n\n        var error, status;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                error = null;\n                _context4.next = 3;\n                return this.s.scheduleSequence([{\n                  label: \"run@\".concat(this.cmd.toString()),\n                  builder: function () {\n                    var _builder2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.prev = 0;\n                              _context3.next = 3;\n                              return _this2.cmd.run(m, r);\n\n                            case 3:\n                              _context3.next = 9;\n                              break;\n\n                            case 5:\n                              _context3.prev = 5;\n                              _context3.t0 = _context3[\"catch\"](0);\n                              error = _context3.t0;\n                              throw _context3.t0;\n\n                            case 9:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3, null, [[0, 5]]);\n                    }));\n\n                    function builder() {\n                      return _builder2.apply(this, arguments);\n                    }\n\n                    return builder;\n                  }()\n                }]).task;\n\n              case 3:\n                status = _context4.sent;\n\n                if (!status.faulty) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw error;\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function run(_x2, _x3) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return ScheduledCommand;\n}();\nexport var scheduleCommands = /*#__PURE__*/_regeneratorRuntime.mark(function scheduleCommands(s, cmds) {\n  var _iterator, _step, cmd;\n\n  return _regeneratorRuntime.wrap(function scheduleCommands$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _iterator = _createForOfIteratorHelper(cmds);\n          _context5.prev = 1;\n\n          _iterator.s();\n\n        case 3:\n          if ((_step = _iterator.n()).done) {\n            _context5.next = 9;\n            break;\n          }\n\n          cmd = _step.value;\n          _context5.next = 7;\n          return new ScheduledCommand(s, cmd);\n\n        case 7:\n          _context5.next = 3;\n          break;\n\n        case 9:\n          _context5.next = 14;\n          break;\n\n        case 11:\n          _context5.prev = 11;\n          _context5.t0 = _context5[\"catch\"](1);\n\n          _iterator.e(_context5.t0);\n\n        case 14:\n          _context5.prev = 14;\n\n          _iterator.f();\n\n          return _context5.finish(14);\n\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, scheduleCommands, null, [[1, 11, 14, 17]]);\n});","map":null,"metadata":{},"sourceType":"module"}