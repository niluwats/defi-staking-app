{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(decodeConstant);\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeConstant = void 0;\n/**\n * @protected\n *\n * @packageDocumentation\n */\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = debug_1.default(\"codec:ast:decode\");\n\nvar read_1 = __importDefault(require(\"../../read\"));\n\nvar Conversion = __importStar(require(\"../../conversion\"));\n\nvar Basic = __importStar(require(\"../../basic\"));\n\nvar Bytes = __importStar(require(\"../../bytes\"));\n\nvar errors_1 = require(\"../../errors\");\n\nfunction decodeConstant(dataType, pointer, info) {\n  var size, word, bytes;\n  return _regeneratorRuntime.wrap(function decodeConstant$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          debug(\"pointer %o\", pointer); //normally, we just dispatch to decodeBasic or decodeBytes.\n          //for statically-sized bytes, however, we need to make a special case.\n          //you see, decodeBasic expects to find the bytes at the *beginning*\n          //of the word, but readDefinition will put them at the *end* of the\n          //word.  So we'll have to adjust things ourselves.\n          //(if the constant is a string constant, it'll be *just* the bytes, so\n          //we have to pad it...)\n\n          if (!(dataType.typeClass === \"bytes\" && dataType.kind === \"static\")) {\n            _context.next = 14;\n            break;\n          }\n\n          size = dataType.length;\n          _context.prev = 3;\n          return _context.delegateYield(read_1.default(pointer, info.state), \"t0\", 5);\n\n        case 5:\n          word = _context.t0;\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t1 = _context[\"catch\"](3);\n          return _context.abrupt(\"return\", errors_1.handleDecodingError(dataType, _context.t1));\n\n        case 11:\n          debug(\"got word: %O\", word); //not bothering to check padding; shouldn't be necessary\n\n          bytes = word.slice(-size); //isolate the bytes we want (works in both cases, even if string literal is short)\n\n          return _context.abrupt(\"return\", {\n            type: dataType,\n            kind: \"value\",\n            value: {\n              asHex: Conversion.toHexString(bytes, size, true) //padding in case of short string literal\n\n            }\n          });\n\n        case 14:\n          //otherwise, as mentioned, just dispatch to decodeBasic or decodeBytes\n          debug(\"not a static bytes\");\n\n          if (!(dataType.typeClass === \"bytes\" || dataType.typeClass === \"string\")) {\n            _context.next = 18;\n            break;\n          }\n\n          return _context.delegateYield(Bytes.Decode.decodeBytes(dataType, pointer, info), \"t2\", 17);\n\n        case 17:\n          return _context.abrupt(\"return\", _context.t2);\n\n        case 18:\n          return _context.delegateYield(Basic.Decode.decodeBasic(dataType, pointer, info), \"t3\", 19);\n\n        case 19:\n          return _context.abrupt(\"return\", _context.t3);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[3, 8]]);\n}\n\nexports.decodeConstant = decodeConstant;","map":null,"metadata":{},"sourceType":"script"}