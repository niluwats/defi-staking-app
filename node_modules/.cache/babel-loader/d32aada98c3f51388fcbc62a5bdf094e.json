{"ast":null,"code":"import _defineProperty from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"D:\\\\truff\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { escapeForMultilineComments } from '../helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { hash } from '../../../utils/hash.js';\nimport { stringify } from '../../../utils/stringify.js';\nimport { integer } from '../../integer.js';\nimport { tuple } from '../../tuple.js';\nexport function buildCompareFunctionArbitrary(cmp) {\n  return tuple(integer().noShrink(), integer(1, 0xffffffff).noShrink()).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        seed = _ref2[0],\n        hashEnvSize = _ref2[1];\n\n    var producer = function producer() {\n      var recorded = {};\n\n      var f = function f(a, b) {\n        var reprA = stringify(a);\n        var reprB = stringify(b);\n        var hA = hash(\"\".concat(seed).concat(reprA)) % hashEnvSize;\n        var hB = hash(\"\".concat(seed).concat(reprB)) % hashEnvSize;\n        var val = cmp(hA, hB);\n        recorded[\"[\".concat(reprA, \",\").concat(reprB, \"]\")] = val;\n        return val;\n      };\n\n      return Object.assign(f, _defineProperty({\n        toString: function toString() {\n          var seenValues = Object.keys(recorded).sort().map(function (k) {\n            return \"\".concat(k, \" => \").concat(stringify(recorded[k]));\n          }).map(function (line) {\n            return \"/* \".concat(escapeForMultilineComments(line), \" */\");\n          });\n          return \"function(a, b) {\\n  // With hash and stringify coming from fast-check\".concat(seenValues.length !== 0 ? \"\\n  \".concat(seenValues.join('\\n  ')) : '', \"\\n  const cmp = \").concat(cmp, \";\\n  const hA = hash('\").concat(seed, \"' + stringify(a)) % \").concat(hashEnvSize, \";\\n  const hB = hash('\").concat(seed, \"' + stringify(b)) % \").concat(hashEnvSize, \";\\n  return cmp(hA, hB);\\n}\");\n        }\n      }, cloneMethod, producer));\n    };\n\n    return producer();\n  });\n}","map":null,"metadata":{},"sourceType":"module"}